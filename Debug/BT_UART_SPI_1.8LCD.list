
BT_UART_SPI_1.8LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000146c  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e8  080056e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f0  080056f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080056f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000078  08005770  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005770  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c110  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bff  00000000  00000000  0002c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001401d  00000000  00000000  0002f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd07  00000000  00000000  0004318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079350  00000000  00000000  0004fe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c91e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  000c9234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004264 	.word	0x08004264

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004264 	.word	0x08004264

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	0005      	movs	r5, r0
 80004c4:	000c      	movs	r4, r1
 80004c6:	0010      	movs	r0, r2
 80004c8:	0019      	movs	r1, r3
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	1c2a      	adds	r2, r5, #0
 80004ce:	801a      	strh	r2, [r3, #0]
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	1c22      	adds	r2, r4, #0
 80004d4:	801a      	strh	r2, [r3, #0]
 80004d6:	1cbb      	adds	r3, r7, #2
 80004d8:	1c02      	adds	r2, r0, #0
 80004da:	801a      	strh	r2, [r3, #0]
 80004dc:	003b      	movs	r3, r7
 80004de:	1c0a      	adds	r2, r1, #0
 80004e0:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	8818      	ldrh	r0, [r3, #0]
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	8819      	ldrh	r1, [r3, #0]
 80004ea:	1cbb      	adds	r3, r7, #2
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	003b      	movs	r3, r7
 80004f0:	881c      	ldrh	r4, [r3, #0]
 80004f2:	2318      	movs	r3, #24
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	0023      	movs	r3, r4
 80004fc:	f000 fb30 	bl	8000b60 <ST7735_FillRectangle>
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bdb0      	pop	{r4, r5, r7, pc}

08000508 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
 800050e:	0002      	movs	r2, r0
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <fillScreen+0x30>)
 8000516:	2200      	movs	r2, #0
 8000518:	5e9a      	ldrsh	r2, [r3, r2]
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <fillScreen+0x34>)
 800051c:	2100      	movs	r1, #0
 800051e:	5e59      	ldrsh	r1, [r3, r1]
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	000b      	movs	r3, r1
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc6 	bl	80004bc <fillRect>
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000094 	.word	0x20000094
 800053c:	20000096 	.word	0x20000096

08000540 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <ST7735_Select+0x18>)
 8000546:	2200      	movs	r2, #0
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	0018      	movs	r0, r3
 800054c:	f001 f9ac 	bl	80018a8 <HAL_GPIO_WritePin>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	50000400 	.word	0x50000400

0800055c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <ST7735_Unselect+0x18>)
 8000562:	2201      	movs	r2, #1
 8000564:	2140      	movs	r1, #64	; 0x40
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f99e 	bl	80018a8 <HAL_GPIO_WritePin>
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	50000400 	.word	0x50000400

08000578 <ST7735_Reset>:

void ST7735_Reset()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <ST7735_Reset+0x28>)
 800057e:	2200      	movs	r2, #0
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f990 	bl	80018a8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000588:	2005      	movs	r0, #5
 800058a:	f000 ff3f 	bl	800140c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <ST7735_Reset+0x28>)
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f987 	bl	80018a8 <HAL_GPIO_WritePin>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	50000800 	.word	0x50000800

080005a4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <ST7735_WriteCommand+0x30>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f976 	bl	80018a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005bc:	2301      	movs	r3, #1
 80005be:	425b      	negs	r3, r3
 80005c0:	1df9      	adds	r1, r7, #7
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <ST7735_WriteCommand+0x34>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f002 f997 	bl	80028f8 <HAL_SPI_Transmit>
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	50000800 	.word	0x50000800
 80005d8:	200000a0 	.word	0x200000a0

080005dc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <ST7735_WriteData+0x30>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 f95b 	bl	80018a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <ST7735_WriteData+0x34>)
 80005fe:	f002 f97b 	bl	80028f8 <HAL_SPI_Transmit>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	50000800 	.word	0x50000800
 8000610:	200000a0 	.word	0x200000a0

08000614 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	220f      	movs	r2, #15
 8000624:	18ba      	adds	r2, r7, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800062a:	e04a      	b.n	80006c2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	210b      	movs	r1, #11
 8000634:	187a      	adds	r2, r7, r1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800063a:	187b      	adds	r3, r7, r1
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff ffb0 	bl	80005a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	200a      	movs	r0, #10
 800064c:	183a      	adds	r2, r7, r0
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000652:	183b      	adds	r3, r7, r0
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b29a      	uxth	r2, r3
 8000658:	230c      	movs	r3, #12
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	400a      	ands	r2, r1
 8000660:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8000662:	183b      	adds	r3, r7, r0
 8000664:	183a      	adds	r2, r7, r0
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	217f      	movs	r1, #127	; 0x7f
 800066a:	400a      	ands	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 800066e:	183b      	adds	r3, r7, r0
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d00c      	beq.n	8000690 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000676:	0004      	movs	r4, r0
 8000678:	183b      	adds	r3, r7, r0
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff ffab 	bl	80005dc <ST7735_WriteData>
            addr += numArgs;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000690:	210c      	movs	r1, #12
 8000692:	187b      	adds	r3, r7, r1
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d013      	beq.n	80006c2 <DisplayInit+0xae>
            ms = *addr++;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2bff      	cmp	r3, #255	; 0xff
 80006ac:	d103      	bne.n	80006b6 <DisplayInit+0xa2>
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	22fa      	movs	r2, #250	; 0xfa
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80006b6:	230c      	movs	r3, #12
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fea5 	bl	800140c <HAL_Delay>
    while(numCommands--) {
 80006c2:	220f      	movs	r2, #15
 80006c4:	18bb      	adds	r3, r7, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	18ba      	adds	r2, r7, r2
 80006ca:	1e59      	subs	r1, r3, #1
 80006cc:	7011      	strb	r1, [r2, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1ac      	bne.n	800062c <DisplayInit+0x18>
        }
    }
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b005      	add	sp, #20
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0005      	movs	r5, r0
 80006e4:	000c      	movs	r4, r1
 80006e6:	0010      	movs	r0, r2
 80006e8:	0019      	movs	r1, r3
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	1c2a      	adds	r2, r5, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	1c22      	adds	r2, r4, #0
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	1d7b      	adds	r3, r7, #5
 80006f8:	1c02      	adds	r2, r0, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000702:	202a      	movs	r0, #42	; 0x2a
 8000704:	f7ff ff4e 	bl	80005a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000708:	210c      	movs	r1, #12
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <ST7735_SetAddressWindow+0xa8>)
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	18d3      	adds	r3, r2, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	187b      	adds	r3, r7, r1
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	709a      	strb	r2, [r3, #2]
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <ST7735_SetAddressWindow+0xa8>)
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	1d7b      	adds	r3, r7, #5
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	18d3      	adds	r3, r2, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	187b      	adds	r3, r7, r1
 8000734:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000736:	000c      	movs	r4, r1
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2104      	movs	r1, #4
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff ff4d 	bl	80005dc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000742:	202b      	movs	r0, #43	; 0x2b
 8000744:	f7ff ff2e 	bl	80005a4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <ST7735_SetAddressWindow+0xac>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	1dbb      	adds	r3, r7, #6
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	0021      	movs	r1, r4
 8000756:	187b      	adds	r3, r7, r1
 8000758:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <ST7735_SetAddressWindow+0xac>)
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	18d3      	adds	r3, r2, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	187b      	adds	r3, r7, r1
 8000768:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2104      	movs	r1, #4
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff ff34 	bl	80005dc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000774:	202c      	movs	r0, #44	; 0x2c
 8000776:	f7ff ff15 	bl	80005a4 <ST7735_WriteCommand>
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bdb0      	pop	{r4, r5, r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	2000009b 	.word	0x2000009b
 8000788:	2000009c 	.word	0x2000009c

0800078c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	0002      	movs	r2, r0
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8000798:	f7ff fed2 	bl	8000540 <ST7735_Select>
    ST7735_Reset();
 800079c:	f7ff feec 	bl	8000578 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <ST7735_Init+0x50>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff36 	bl	8000614 <DisplayInit>
    DisplayInit(init_cmds2);
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <ST7735_Init+0x54>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ff32 	bl	8000614 <DisplayInit>
    DisplayInit(init_cmds3);
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <ST7735_Init+0x58>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff2e 	bl	8000614 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <ST7735_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <ST7735_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 f811 	bl	80007f0 <ST7735_SetRotation>
    ST7735_Unselect();
 80007ce:	f7ff fec5 	bl	800055c <ST7735_Unselect>

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	08004288 	.word	0x08004288
 80007e0:	080042c0 	.word	0x080042c0
 80007e4:	080042d0 	.word	0x080042d0
 80007e8:	20000099 	.word	0x20000099
 80007ec:	2000009a 	.word	0x2000009a

080007f0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2203      	movs	r2, #3
 800080a:	4013      	ands	r3, r2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <ST7735_SetRotation+0xf8>)
 8000810:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <ST7735_SetRotation+0xf8>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d041      	beq.n	800089e <ST7735_SetRotation+0xae>
 800081a:	dc53      	bgt.n	80008c4 <ST7735_SetRotation+0xd4>
 800081c:	2b02      	cmp	r3, #2
 800081e:	d02b      	beq.n	8000878 <ST7735_SetRotation+0x88>
 8000820:	dc50      	bgt.n	80008c4 <ST7735_SetRotation+0xd4>
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <ST7735_SetRotation+0x3c>
 8000826:	2b01      	cmp	r3, #1
 8000828:	d013      	beq.n	8000852 <ST7735_SetRotation+0x62>
 800082a:	e04b      	b.n	80008c4 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	22c0      	movs	r2, #192	; 0xc0
 8000832:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <ST7735_SetRotation+0xfc>)
 8000836:	22a0      	movs	r2, #160	; 0xa0
 8000838:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <ST7735_SetRotation+0x100>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <ST7735_SetRotation+0x104>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <ST7735_SetRotation+0x108>)
 8000846:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <ST7735_SetRotation+0x10c>)
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <ST7735_SetRotation+0x110>)
 800084e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000850:	e038      	b.n	80008c4 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000852:	230f      	movs	r3, #15
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	22a0      	movs	r2, #160	; 0xa0
 8000858:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <ST7735_SetRotation+0x100>)
 800085c:	22a0      	movs	r2, #160	; 0xa0
 800085e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <ST7735_SetRotation+0xfc>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <ST7735_SetRotation+0x104>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <ST7735_SetRotation+0x110>)
 800086c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <ST7735_SetRotation+0x10c>)
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <ST7735_SetRotation+0x108>)
 8000874:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000876:	e025      	b.n	80008c4 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000878:	230f      	movs	r3, #15
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <ST7735_SetRotation+0xfc>)
 8000882:	22a0      	movs	r2, #160	; 0xa0
 8000884:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <ST7735_SetRotation+0x100>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <ST7735_SetRotation+0x104>)
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <ST7735_SetRotation+0x108>)
 8000892:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <ST7735_SetRotation+0x10c>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <ST7735_SetRotation+0x110>)
 800089a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800089c:	e012      	b.n	80008c4 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800089e:	230f      	movs	r3, #15
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	2260      	movs	r2, #96	; 0x60
 80008a4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <ST7735_SetRotation+0x100>)
 80008a8:	22a0      	movs	r2, #160	; 0xa0
 80008aa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <ST7735_SetRotation+0xfc>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <ST7735_SetRotation+0x104>)
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <ST7735_SetRotation+0x110>)
 80008b8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <ST7735_SetRotation+0x10c>)
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <ST7735_SetRotation+0x108>)
 80008c0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008c2:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 80008c4:	f7ff fe3c 	bl	8000540 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80008c8:	2036      	movs	r0, #54	; 0x36
 80008ca:	f7ff fe6b 	bl	80005a4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80008ce:	230f      	movs	r3, #15
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	2101      	movs	r1, #1
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fe81 	bl	80005dc <ST7735_WriteData>
  ST7735_Unselect();
 80008da:	f7ff fe3f 	bl	800055c <ST7735_Unselect>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b004      	add	sp, #16
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000098 	.word	0x20000098
 80008ec:	20000096 	.word	0x20000096
 80008f0:	20000094 	.word	0x20000094
 80008f4:	20000099 	.word	0x20000099
 80008f8:	2000009b 	.word	0x2000009b
 80008fc:	2000009a 	.word	0x2000009a
 8000900:	2000009c 	.word	0x2000009c

08000904 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000904:	b082      	sub	sp, #8
 8000906:	b5b0      	push	{r4, r5, r7, lr}
 8000908:	b088      	sub	sp, #32
 800090a:	af00      	add	r7, sp, #0
 800090c:	0004      	movs	r4, r0
 800090e:	0008      	movs	r0, r1
 8000910:	0011      	movs	r1, r2
 8000912:	2204      	movs	r2, #4
 8000914:	2530      	movs	r5, #48	; 0x30
 8000916:	1952      	adds	r2, r2, r5
 8000918:	19d2      	adds	r2, r2, r7
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	1dbb      	adds	r3, r7, #6
 800091e:	1c22      	adds	r2, r4, #0
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	1c02      	adds	r2, r0, #0
 8000926:	801a      	strh	r2, [r3, #0]
 8000928:	1cfb      	adds	r3, r7, #3
 800092a:	1c0a      	adds	r2, r1, #0
 800092c:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	b2d9      	uxtb	r1, r3
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	2304      	movs	r3, #4
 8000942:	195b      	adds	r3, r3, r5
 8000944:	19db      	adds	r3, r3, r7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3b01      	subs	r3, #1
 800094e:	b2dc      	uxtb	r4, r3
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	2304      	movs	r3, #4
 8000958:	195b      	adds	r3, r3, r5
 800095a:	19db      	adds	r3, r3, r7
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	3b01      	subs	r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	0022      	movs	r2, r4
 8000968:	f7ff feb8 	bl	80006dc <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	e053      	b.n	8000a1a <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8000972:	2304      	movs	r3, #4
 8000974:	2030      	movs	r0, #48	; 0x30
 8000976:	181b      	adds	r3, r3, r0
 8000978:	19db      	adds	r3, r3, r7
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	1cfb      	adds	r3, r7, #3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3b20      	subs	r3, #32
 8000982:	2104      	movs	r1, #4
 8000984:	1809      	adds	r1, r1, r0
 8000986:	19c9      	adds	r1, r1, r7
 8000988:	7849      	ldrb	r1, [r1, #1]
 800098a:	434b      	muls	r3, r1
 800098c:	0019      	movs	r1, r3
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	18cb      	adds	r3, r1, r3
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	e030      	b.n	8000a02 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	409a      	lsls	r2, r3
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	4013      	ands	r3, r2
 80009ac:	d013      	beq.n	80009d6 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009ae:	203c      	movs	r0, #60	; 0x3c
 80009b0:	183b      	adds	r3, r7, r0
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	2110      	movs	r1, #16
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	183b      	adds	r3, r7, r0
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2102      	movs	r1, #2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fe04 	bl	80005dc <ST7735_WriteData>
 80009d4:	e012      	b.n	80009fc <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80009d6:	2040      	movs	r0, #64	; 0x40
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	210c      	movs	r1, #12
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	183b      	adds	r3, r7, r0
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2102      	movs	r1, #2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fdf0 	bl	80005dc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	3301      	adds	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	2304      	movs	r3, #4
 8000a04:	2230      	movs	r2, #48	; 0x30
 8000a06:	189b      	adds	r3, r3, r2
 8000a08:	19db      	adds	r3, r3, r7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d3c5      	bcc.n	80009a0 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3301      	adds	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	2230      	movs	r2, #48	; 0x30
 8000a1e:	189b      	adds	r3, r3, r2
 8000a20:	19db      	adds	r3, r3, r7
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	001a      	movs	r2, r3
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d3a2      	bcc.n	8000972 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b008      	add	sp, #32
 8000a34:	bcb0      	pop	{r4, r5, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	b002      	add	sp, #8
 8000a3a:	4718      	bx	r3

08000a3c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a40:	b087      	sub	sp, #28
 8000a42:	af04      	add	r7, sp, #16
 8000a44:	603a      	str	r2, [r7, #0]
 8000a46:	2204      	movs	r2, #4
 8000a48:	2418      	movs	r4, #24
 8000a4a:	1912      	adds	r2, r2, r4
 8000a4c:	2408      	movs	r4, #8
 8000a4e:	46a4      	mov	ip, r4
 8000a50:	44bc      	add	ip, r7
 8000a52:	4462      	add	r2, ip
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	1c02      	adds	r2, r0, #0
 8000a5a:	801a      	strh	r2, [r3, #0]
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	1c0a      	adds	r2, r1, #0
 8000a60:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 8000a62:	f7ff fd6d 	bl	8000540 <ST7735_Select>

    while(*str) {
 8000a66:	e067      	b.n	8000b38 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8000a68:	1dbb      	adds	r3, r7, #6
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	2118      	movs	r1, #24
 8000a70:	1852      	adds	r2, r2, r1
 8000a72:	2008      	movs	r0, #8
 8000a74:	4684      	mov	ip, r0
 8000a76:	44bc      	add	ip, r7
 8000a78:	4462      	add	r2, ip
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <ST7735_WriteString+0x11c>)
 8000a80:	2000      	movs	r0, #0
 8000a82:	5e12      	ldrsh	r2, [r2, r0]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	db27      	blt.n	8000ad8 <ST7735_WriteString+0x9c>
            x = 0;
 8000a88:	1dbb      	adds	r3, r7, #6
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	0008      	movs	r0, r1
 8000a92:	185b      	adds	r3, r3, r1
 8000a94:	2208      	movs	r2, #8
 8000a96:	4694      	mov	ip, r2
 8000a98:	44bc      	add	ip, r7
 8000a9a:	4463      	add	r3, ip
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	b299      	uxth	r1, r3
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	1d3a      	adds	r2, r7, #4
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	188a      	adds	r2, r1, r2
 8000aa8:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	2204      	movs	r2, #4
 8000ab0:	1812      	adds	r2, r2, r0
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	44bc      	add	ip, r7
 8000ab8:	4462      	add	r2, ip
 8000aba:	7852      	ldrb	r2, [r2, #1]
 8000abc:	189b      	adds	r3, r3, r2
 8000abe:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <ST7735_WriteString+0x120>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	5e52      	ldrsh	r2, [r2, r1]
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	da3c      	bge.n	8000b42 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d103      	bne.n	8000ad8 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
                continue;
 8000ad6:	e02f      	b.n	8000b38 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	781d      	ldrb	r5, [r3, #0]
 8000adc:	2304      	movs	r3, #4
 8000ade:	2618      	movs	r6, #24
 8000ae0:	199b      	adds	r3, r3, r6
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	44bc      	add	ip, r7
 8000ae8:	4463      	add	r3, ip
 8000aea:	1d3a      	adds	r2, r7, #4
 8000aec:	8814      	ldrh	r4, [r2, #0]
 8000aee:	1dba      	adds	r2, r7, #6
 8000af0:	8810      	ldrh	r0, [r2, #0]
 8000af2:	2228      	movs	r2, #40	; 0x28
 8000af4:	2108      	movs	r1, #8
 8000af6:	1852      	adds	r2, r2, r1
 8000af8:	19d2      	adds	r2, r2, r7
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	9202      	str	r2, [sp, #8]
 8000afe:	2224      	movs	r2, #36	; 0x24
 8000b00:	1852      	adds	r2, r2, r1
 8000b02:	19d2      	adds	r2, r2, r7
 8000b04:	8812      	ldrh	r2, [r2, #0]
 8000b06:	9201      	str	r2, [sp, #4]
 8000b08:	466a      	mov	r2, sp
 8000b0a:	6859      	ldr	r1, [r3, #4]
 8000b0c:	6011      	str	r1, [r2, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	002a      	movs	r2, r5
 8000b12:	0021      	movs	r1, r4
 8000b14:	f7ff fef6 	bl	8000904 <ST7735_WriteChar>
        x += font.width;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	199b      	adds	r3, r3, r6
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	4694      	mov	ip, r2
 8000b20:	44bc      	add	ip, r7
 8000b22:	4463      	add	r3, ip
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b299      	uxth	r1, r3
 8000b28:	1dbb      	adds	r3, r7, #6
 8000b2a:	1dba      	adds	r2, r7, #6
 8000b2c:	8812      	ldrh	r2, [r2, #0]
 8000b2e:	188a      	adds	r2, r1, r2
 8000b30:	801a      	strh	r2, [r3, #0]
        str++;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d193      	bne.n	8000a68 <ST7735_WriteString+0x2c>
 8000b40:	e000      	b.n	8000b44 <ST7735_WriteString+0x108>
                break;
 8000b42:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 8000b44:	f7ff fd0a 	bl	800055c <ST7735_Unselect>
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b50:	bc08      	pop	{r3}
 8000b52:	b002      	add	sp, #8
 8000b54:	4718      	bx	r3
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000094 	.word	0x20000094
 8000b5c:	20000096 	.word	0x20000096

08000b60 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0005      	movs	r5, r0
 8000b68:	000c      	movs	r4, r1
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	1dbb      	adds	r3, r7, #6
 8000b70:	1c2a      	adds	r2, r5, #0
 8000b72:	801a      	strh	r2, [r3, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	1c22      	adds	r2, r4, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	1cbb      	adds	r3, r7, #2
 8000b7c:	1c02      	adds	r2, r0, #0
 8000b7e:	801a      	strh	r2, [r3, #0]
 8000b80:	003b      	movs	r3, r7
 8000b82:	1c0a      	adds	r2, r1, #0
 8000b84:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	4a49      	ldr	r2, [pc, #292]	; (8000cb0 <ST7735_FillRectangle+0x150>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	5e52      	ldrsh	r2, [r2, r1]
 8000b90:	4293      	cmp	r3, r2
 8000b92:	db00      	blt.n	8000b96 <ST7735_FillRectangle+0x36>
 8000b94:	e087      	b.n	8000ca6 <ST7735_FillRectangle+0x146>
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4a46      	ldr	r2, [pc, #280]	; (8000cb4 <ST7735_FillRectangle+0x154>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	5e52      	ldrsh	r2, [r2, r1]
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	db00      	blt.n	8000ba6 <ST7735_FillRectangle+0x46>
 8000ba4:	e07f      	b.n	8000ca6 <ST7735_FillRectangle+0x146>
    if((x + w - 1) >= _width) w = _width - x;
 8000ba6:	1dbb      	adds	r3, r7, #6
 8000ba8:	881a      	ldrh	r2, [r3, #0]
 8000baa:	1cbb      	adds	r3, r7, #2
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	18d3      	adds	r3, r2, r3
 8000bb0:	4a3f      	ldr	r2, [pc, #252]	; (8000cb0 <ST7735_FillRectangle+0x150>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	5e52      	ldrsh	r2, [r2, r1]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	dd08      	ble.n	8000bcc <ST7735_FillRectangle+0x6c>
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <ST7735_FillRectangle+0x150>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	5e9b      	ldrsh	r3, [r3, r2]
 8000bc0:	b299      	uxth	r1, r3
 8000bc2:	1cbb      	adds	r3, r7, #2
 8000bc4:	1dba      	adds	r2, r7, #6
 8000bc6:	8812      	ldrh	r2, [r2, #0]
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	4a37      	ldr	r2, [pc, #220]	; (8000cb4 <ST7735_FillRectangle+0x154>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	5e52      	ldrsh	r2, [r2, r1]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	dd08      	ble.n	8000bf2 <ST7735_FillRectangle+0x92>
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <ST7735_FillRectangle+0x154>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	5e9b      	ldrsh	r3, [r3, r2]
 8000be6:	b299      	uxth	r1, r3
 8000be8:	003b      	movs	r3, r7
 8000bea:	1d3a      	adds	r2, r7, #4
 8000bec:	8812      	ldrh	r2, [r2, #0]
 8000bee:	1a8a      	subs	r2, r1, r2
 8000bf0:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8000bf2:	f7ff fca5 	bl	8000540 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b2d9      	uxtb	r1, r3
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	1cbb      	adds	r3, r7, #2
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	18d3      	adds	r3, r2, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	3b01      	subs	r3, #1
 8000c14:	b2dc      	uxtb	r4, r3
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	18d3      	adds	r3, r2, r3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	0022      	movs	r2, r4
 8000c2c:	f7ff fd56 	bl	80006dc <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c30:	2120      	movs	r1, #32
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	200c      	movs	r0, #12
 8000c3e:	183b      	adds	r3, r7, r0
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	183b      	adds	r3, r7, r0
 8000c4a:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <ST7735_FillRectangle+0x158>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fe28 	bl	80018a8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	8812      	ldrh	r2, [r2, #0]
 8000c5e:	801a      	strh	r2, [r3, #0]
 8000c60:	e01a      	b.n	8000c98 <ST7735_FillRectangle+0x138>
        for(x = w; x > 0; x--) {
 8000c62:	1dbb      	adds	r3, r7, #6
 8000c64:	1cba      	adds	r2, r7, #2
 8000c66:	8812      	ldrh	r2, [r2, #0]
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	e00c      	b.n	8000c86 <ST7735_FillRectangle+0x126>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	220c      	movs	r2, #12
 8000c72:	18b9      	adds	r1, r7, r2
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <ST7735_FillRectangle+0x15c>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	f001 fe3e 	bl	80028f8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	3a01      	subs	r2, #1
 8000c84:	801a      	strh	r2, [r3, #0]
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1ee      	bne.n	8000c6c <ST7735_FillRectangle+0x10c>
    for(y = h; y > 0; y--) {
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	881a      	ldrh	r2, [r3, #0]
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	3a01      	subs	r2, #1
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1e0      	bne.n	8000c62 <ST7735_FillRectangle+0x102>
        }
    }

    ST7735_Unselect();
 8000ca0:	f7ff fc5c 	bl	800055c <ST7735_Unselect>
 8000ca4:	e000      	b.n	8000ca8 <ST7735_FillRectangle+0x148>
    if((x >= _width) || (y >= _height)) return;
 8000ca6:	46c0      	nop			; (mov r8, r8)
}
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bdb0      	pop	{r4, r5, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000094 	.word	0x20000094
 8000cb4:	20000096 	.word	0x20000096
 8000cb8:	50000800 	.word	0x50000800
 8000cbc:	200000a0 	.word	0x200000a0

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fb31 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f8a7 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 f979 	bl	8000fc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cd2:	f000 f90f 	bl	8000ef4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cd6:	f000 f945 	bl	8000f64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fd56 	bl	800078c <ST7735_Init>
   fillScreen(BLUE);
 8000ce0:	201f      	movs	r0, #31
 8000ce2:	f7ff fc11 	bl	8000508 <fillScreen>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  {
	          //HAL_UART_Receive(&huart1, uart_buffer, UART_BUFFER_SIZE, HAL_MAX_DELAY);
		  	  HAL_UART_Receive(&huart1, uart_buffer, UART_BUFFER_SIZE, 100);
 8000ce6:	4944      	ldr	r1, [pc, #272]	; (8000df8 <main+0x138>)
 8000ce8:	4844      	ldr	r0, [pc, #272]	; (8000dfc <main+0x13c>)
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	2201      	movs	r2, #1
 8000cee:	f002 f889 	bl	8002e04 <HAL_UART_Receive>
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <main+0x138>)
 8000cf4:	781a      	ldrb	r2, [r3, #0]
	 	      memcpy( spi_buffer, uart_buffer, UART_BUFFER_SIZE);
 8000cf6:	4b42      	ldr	r3, [pc, #264]	; (8000e00 <main+0x140>)
 8000cf8:	701a      	strb	r2, [r3, #0]
	  	      if(HAL_SPI_Transmit(&hspi1, spi_buffer, UART_BUFFER_SIZE, 100)==HAL_OK) // Send SPI data
 8000cfa:	4941      	ldr	r1, [pc, #260]	; (8000e00 <main+0x140>)
 8000cfc:	4841      	ldr	r0, [pc, #260]	; (8000e04 <main+0x144>)
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	2201      	movs	r2, #1
 8000d02:	f001 fdf9 	bl	80028f8 <HAL_SPI_Transmit>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d1ed      	bne.n	8000ce6 <main+0x26>
	  	      {
	  	    	ST7735_SetRotation(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fd70 	bl	80007f0 <ST7735_SetRotation>
	  	    	 sprintf(buffer,"Value %s", spi_buffer);
 8000d10:	4a3b      	ldr	r2, [pc, #236]	; (8000e00 <main+0x140>)
 8000d12:	493d      	ldr	r1, [pc, #244]	; (8000e08 <main+0x148>)
 8000d14:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <main+0x14c>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f002 fe3a 	bl	8003990 <siprintf>
	  	    	 ST7735_WriteString( 1, 1, &buffer, Font_16x26, YELLOW ,BLUE);// Wait for UART data
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <main+0x150>)
 8000d1e:	483b      	ldr	r0, [pc, #236]	; (8000e0c <main+0x14c>)
 8000d20:	221f      	movs	r2, #31
 8000d22:	9202      	str	r2, [sp, #8]
 8000d24:	4a3b      	ldr	r2, [pc, #236]	; (8000e14 <main+0x154>)
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	466a      	mov	r2, sp
 8000d2a:	6859      	ldr	r1, [r3, #4]
 8000d2c:	6011      	str	r1, [r2, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	0002      	movs	r2, r0
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fe81 	bl	8000a3c <ST7735_WriteString>
	  			  // Toggle LED on PA8 based on received data
	  			  if (spi_buffer[0] == 'Y' || spi_buffer[0] == 'y')
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <main+0x140>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b59      	cmp	r3, #89	; 0x59
 8000d40:	d003      	beq.n	8000d4a <main+0x8a>
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <main+0x140>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b79      	cmp	r3, #121	; 0x79
 8000d48:	d108      	bne.n	8000d5c <main+0x9c>
	  			  {
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Turn on LED on PA8
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	0059      	lsls	r1, r3, #1
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	2201      	movs	r2, #1
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fda7 	bl	80018a8 <HAL_GPIO_WritePin>
 8000d5a:	e00f      	b.n	8000d7c <main+0xbc>
	  			  }
	  			  else if (spi_buffer[0] == 'N' || spi_buffer[0] == 'n')
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <main+0x140>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b4e      	cmp	r3, #78	; 0x4e
 8000d62:	d003      	beq.n	8000d6c <main+0xac>
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <main+0x140>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b6e      	cmp	r3, #110	; 0x6e
 8000d6a:	d107      	bne.n	8000d7c <main+0xbc>
	  			  {
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Turn off LED on PA8
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	0059      	lsls	r1, r3, #1
 8000d70:	23a0      	movs	r3, #160	; 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	2200      	movs	r2, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fd96 	bl	80018a8 <HAL_GPIO_WritePin>
	  			  }

	  			              if (spi_buffer[0] == 'E' || spi_buffer[0] == 'e')
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <main+0x140>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b45      	cmp	r3, #69	; 0x45
 8000d82:	d003      	beq.n	8000d8c <main+0xcc>
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <main+0x140>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b65      	cmp	r3, #101	; 0x65
 8000d8a:	d107      	bne.n	8000d9c <main+0xdc>
	  			  			  {
	  			  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // Turn on LED on PA8
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4821      	ldr	r0, [pc, #132]	; (8000e18 <main+0x158>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	0019      	movs	r1, r3
 8000d96:	f000 fd87 	bl	80018a8 <HAL_GPIO_WritePin>
 8000d9a:	e00e      	b.n	8000dba <main+0xfa>
	  			  			  }
	  			  			  else if (spi_buffer[0] == 'N' || spi_buffer[0] == 'n')
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <main+0x140>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b4e      	cmp	r3, #78	; 0x4e
 8000da2:	d003      	beq.n	8000dac <main+0xec>
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <main+0x140>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b6e      	cmp	r3, #110	; 0x6e
 8000daa:	d106      	bne.n	8000dba <main+0xfa>
	  			  			  {
	  			  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Turn off LED on PA8
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4819      	ldr	r0, [pc, #100]	; (8000e18 <main+0x158>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	0019      	movs	r1, r3
 8000db6:	f000 fd77 	bl	80018a8 <HAL_GPIO_WritePin>
	  			  			  }

	  			                          if (spi_buffer[0] == 'S' || spi_buffer[0] == 's')
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <main+0x140>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b53      	cmp	r3, #83	; 0x53
 8000dc0:	d003      	beq.n	8000dca <main+0x10a>
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <main+0x140>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b73      	cmp	r3, #115	; 0x73
 8000dc8:	d106      	bne.n	8000dd8 <main+0x118>
	  			              			  {
	  			              				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Turn on LED on PA8
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <main+0x158>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fd69 	bl	80018a8 <HAL_GPIO_WritePin>
 8000dd6:	e00e      	b.n	8000df6 <main+0x136>
	  			              			  }
	  			              			  else if (spi_buffer[0] == 'N' || spi_buffer[0] == 'n')
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <main+0x140>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b4e      	cmp	r3, #78	; 0x4e
 8000dde:	d004      	beq.n	8000dea <main+0x12a>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <main+0x140>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b6e      	cmp	r3, #110	; 0x6e
 8000de6:	d000      	beq.n	8000dea <main+0x12a>
 8000de8:	e77d      	b.n	8000ce6 <main+0x26>
	  			              			  {
	  			              				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Turn off LED on PA8
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <main+0x158>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	2110      	movs	r1, #16
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fd59 	bl	80018a8 <HAL_GPIO_WritePin>
	  {
 8000df6:	e776      	b.n	8000ce6 <main+0x26>
 8000df8:	20000180 	.word	0x20000180
 8000dfc:	200000f8 	.word	0x200000f8
 8000e00:	20000184 	.word	0x20000184
 8000e04:	200000a0 	.word	0x200000a0
 8000e08:	0800427c 	.word	0x0800427c
 8000e0c:	20000188 	.word	0x20000188
 8000e10:	20000000 	.word	0x20000000
 8000e14:	0000ffe0 	.word	0x0000ffe0
 8000e18:	50000400 	.word	0x50000400

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b09d      	sub	sp, #116	; 0x74
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	2438      	movs	r4, #56	; 0x38
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	2338      	movs	r3, #56	; 0x38
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f002 fda7 	bl	8003980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e32:	2324      	movs	r3, #36	; 0x24
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	0018      	movs	r0, r3
 8000e38:	2314      	movs	r3, #20
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f002 fd9f 	bl	8003980 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e42:	003b      	movs	r3, r7
 8000e44:	0018      	movs	r0, r3
 8000e46:	2324      	movs	r3, #36	; 0x24
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f002 fd98 	bl	8003980 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <SystemClock_Config+0xd4>)
 8000e56:	401a      	ands	r2, r3
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <SystemClock_Config+0xd0>)
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	0109      	lsls	r1, r1, #4
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e62:	0021      	movs	r1, r4
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2210      	movs	r2, #16
 8000e68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	22a0      	movs	r2, #160	; 0xa0
 8000e7a:	0212      	lsls	r2, r2, #8
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 fd2c 	bl	80018e4 <HAL_RCC_OscConfig>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e90:	f000 f92c 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	2124      	movs	r1, #36	; 0x24
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	220f      	movs	r2, #15
 8000e9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 f8d7 	bl	800206c <HAL_RCC_ClockConfig>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ec2:	f000 f913 	bl	80010ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 faed 	bl	80024b4 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ede:	f000 f905 	bl	80010ec <Error_Handler>
  }
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b01d      	add	sp, #116	; 0x74
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	40007000 	.word	0x40007000
 8000ef0:	ffffe7ff 	.word	0xffffe7ff

08000ef4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <MX_SPI1_Init+0x6c>)
 8000efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f00:	2282      	movs	r2, #130	; 0x82
 8000f02:	0052      	lsls	r2, r2, #1
 8000f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	02d2      	lsls	r2, r2, #11
 8000f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <MX_SPI1_Init+0x68>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 fc42 	bl	80027d0 <HAL_SPI_Init>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f50:	f000 f8cc 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	200000a0 	.word	0x200000a0
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_USART1_UART_Init+0x5c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f70:	2296      	movs	r2, #150	; 0x96
 8000f72:	0192      	lsls	r2, r2, #6
 8000f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <MX_USART1_UART_Init+0x58>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f001 fed7 	bl	8002d5c <HAL_UART_Init>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f000 f89b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000f8 	.word	0x200000f8
 8000fc0:	40013800 	.word	0x40013800

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b08b      	sub	sp, #44	; 0x2c
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	2414      	movs	r4, #20
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f002 fcd3 	bl	8003980 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8000ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_GPIO_Init+0x11c>)
 800100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8001010:	2102      	movs	r1, #2
 8001012:	430a      	orrs	r2, r1
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	2202      	movs	r2, #2
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8001028:	2104      	movs	r1, #4
 800102a:	430a      	orrs	r2, r1
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_GPIO_Init+0x11c>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	2204      	movs	r2, #4
 8001034:	4013      	ands	r3, r2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|CS_Pin, GPIO_PIN_RESET);
 800103a:	238a      	movs	r3, #138	; 0x8a
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4829      	ldr	r0, [pc, #164]	; (80010e4 <MX_GPIO_Init+0x120>)
 8001040:	2200      	movs	r2, #0
 8001042:	0019      	movs	r1, r3
 8001044:	f000 fc30 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_GPIO_Init+0x124>)
 800104a:	2200      	movs	r2, #0
 800104c:	21c0      	movs	r1, #192	; 0xc0
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fc2a 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	0059      	lsls	r1, r3, #1
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	2200      	movs	r2, #0
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fc22 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin CS_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|CS_Pin;
 8001064:	193b      	adds	r3, r7, r4
 8001066:	228a      	movs	r2, #138	; 0x8a
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	193b      	adds	r3, r7, r4
 800106e:	2201      	movs	r2, #1
 8001070:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	193b      	adds	r3, r7, r4
 8001080:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_GPIO_Init+0x120>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f000 fa99 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	22c0      	movs	r2, #192	; 0xc0
 800108e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2201      	movs	r2, #1
 8001094:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <MX_GPIO_Init+0x124>)
 80010a6:	0019      	movs	r1, r3
 80010a8:	0010      	movs	r0, r2
 80010aa:	f000 fa87 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010ae:	0021      	movs	r1, r4
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	0052      	lsls	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2201      	movs	r2, #1
 80010bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	187a      	adds	r2, r7, r1
 80010cc:	23a0      	movs	r3, #160	; 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fa72 	bl	80015bc <HAL_GPIO_Init>

}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b00b      	add	sp, #44	; 0x2c
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	50000400 	.word	0x50000400
 80010e8:	50000800 	.word	0x50000800

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_MspInit+0x24>)
 80010fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x24>)
 8001102:	2101      	movs	r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_MspInit+0x24>)
 800110a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_MspInit+0x24>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0549      	lsls	r1, r1, #21
 8001112:	430a      	orrs	r2, r1
 8001114:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	240c      	movs	r4, #12
 800112a:	193b      	adds	r3, r7, r4
 800112c:	0018      	movs	r0, r3
 800112e:	2314      	movs	r3, #20
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f002 fc24 	bl	8003980 <memset>
  if(hspi->Instance==SPI1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d129      	bne.n	8001196 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0149      	lsls	r1, r1, #5
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 8001152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 8001156:	2101      	movs	r1, #1
 8001158:	430a      	orrs	r2, r1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2201      	movs	r2, #1
 8001162:	4013      	ands	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001168:	0021      	movs	r1, r4
 800116a:	187b      	adds	r3, r7, r1
 800116c:	22f0      	movs	r2, #240	; 0xf0
 800116e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2202      	movs	r2, #2
 8001174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2203      	movs	r2, #3
 8001180:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	187a      	adds	r2, r7, r1
 800118a:	23a0      	movs	r3, #160	; 0xa0
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f000 fa13 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b009      	add	sp, #36	; 0x24
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40013000 	.word	0x40013000
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	240c      	movs	r4, #12
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	0018      	movs	r0, r3
 80011b6:	2314      	movs	r3, #20
 80011b8:	001a      	movs	r2, r3
 80011ba:	2100      	movs	r1, #0
 80011bc:	f002 fbe0 	bl	8003980 <memset>
  if(huart->Instance==USART1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a18      	ldr	r2, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x80>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12a      	bne.n	8001220 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_UART_MspInit+0x84>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0x84>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	01c9      	lsls	r1, r1, #7
 80011d4:	430a      	orrs	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0x84>)
 80011da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_UART_MspInit+0x84>)
 80011de:	2101      	movs	r1, #1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0x84>)
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	2201      	movs	r2, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	22c0      	movs	r2, #192	; 0xc0
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	0021      	movs	r1, r4
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2202      	movs	r2, #2
 80011fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2203      	movs	r2, #3
 800120a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2204      	movs	r2, #4
 8001210:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	187a      	adds	r2, r7, r1
 8001214:	23a0      	movs	r3, #160	; 0xa0
 8001216:	05db      	lsls	r3, r3, #23
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f000 f9ce 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b009      	add	sp, #36	; 0x24
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	40013800 	.word	0x40013800
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f8be 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f002 fb4c 	bl	800392c <__errno>
 8001294:	0003      	movs	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	2301      	movs	r3, #1
 800129c:	425b      	negs	r3, r3
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	18d2      	adds	r2, r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b006      	add	sp, #24
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20002000 	.word	0x20002000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	2000018c 	.word	0x2000018c
 80012c8:	200001a8 	.word	0x200001a8

080012cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012dc:	f7ff fff6 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LoopForever+0xe>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <LoopForever+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f002 fb17 	bl	8003938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fcd9 	bl	8000cc0 <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
  ldr   r0, =_estack
 8001310:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800131c:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8001320:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001324:	200001a4 	.word	0x200001a4

08001328 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_COMP_IRQHandler>
	...

0800132c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_Init+0x3c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Init+0x3c>)
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f811 	bl	800136c <HAL_InitTick>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d003      	beq.n	8001356 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e001      	b.n	800135a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001356:	f7ff fecf 	bl	80010f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_InitTick+0x5c>)
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	0019      	movs	r1, r3
 800137e:	23fa      	movs	r3, #250	; 0xfa
 8001380:	0098      	lsls	r0, r3, #2
 8001382:	f7fe fecb 	bl	800011c <__udivsi3>
 8001386:	0003      	movs	r3, r0
 8001388:	0019      	movs	r1, r3
 800138a:	0020      	movs	r0, r4
 800138c:	f7fe fec6 	bl	800011c <__udivsi3>
 8001390:	0003      	movs	r3, r0
 8001392:	0018      	movs	r0, r3
 8001394:	f000 f905 	bl	80015a2 <HAL_SYSTICK_Config>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e00f      	b.n	80013c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d80b      	bhi.n	80013be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	2301      	movs	r3, #1
 80013aa:	425b      	negs	r3, r3
 80013ac:	2200      	movs	r2, #0
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f8e2 	bl	8001578 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_InitTick+0x64>)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b003      	add	sp, #12
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000010 	.word	0x20000010
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x1c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	001a      	movs	r2, r3
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x20>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	18d2      	adds	r2, r2, r3
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_IncTick+0x20>)
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000010 	.word	0x20000010
 80013f4:	20000190 	.word	0x20000190

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <HAL_GetTick+0x10>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	20000190 	.word	0x20000190

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff fff0 	bl	80013f8 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	d005      	beq.n	8001432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_Delay+0x44>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001a      	movs	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	189b      	adds	r3, r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	f7ff ffe0 	bl	80013f8 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f7      	bhi.n	8001434 <HAL_Delay+0x28>
  {
  }
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	20000010 	.word	0x20000010

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	0002      	movs	r2, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b7f      	cmp	r3, #127	; 0x7f
 8001468:	d828      	bhi.n	80014bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <__NVIC_SetPriority+0xd4>)
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	33c0      	adds	r3, #192	; 0xc0
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	589b      	ldr	r3, [r3, r2]
 800147a:	1dfa      	adds	r2, r7, #7
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	0011      	movs	r1, r2
 8001480:	2203      	movs	r2, #3
 8001482:	400a      	ands	r2, r1
 8001484:	00d2      	lsls	r2, r2, #3
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	43d2      	mvns	r2, r2
 800148e:	401a      	ands	r2, r3
 8001490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	401a      	ands	r2, r3
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	2303      	movs	r3, #3
 80014a2:	4003      	ands	r3, r0
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <__NVIC_SetPriority+0xd4>)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	430a      	orrs	r2, r1
 80014b4:	33c0      	adds	r3, #192	; 0xc0
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ba:	e031      	b.n	8001520 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <__NVIC_SetPriority+0xd8>)
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	0019      	movs	r1, r3
 80014c4:	230f      	movs	r3, #15
 80014c6:	400b      	ands	r3, r1
 80014c8:	3b08      	subs	r3, #8
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3306      	adds	r3, #6
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	18d3      	adds	r3, r2, r3
 80014d2:	3304      	adds	r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1dfa      	adds	r2, r7, #7
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	0011      	movs	r1, r2
 80014dc:	2203      	movs	r2, #3
 80014de:	400a      	ands	r2, r1
 80014e0:	00d2      	lsls	r2, r2, #3
 80014e2:	21ff      	movs	r1, #255	; 0xff
 80014e4:	4091      	lsls	r1, r2
 80014e6:	000a      	movs	r2, r1
 80014e8:	43d2      	mvns	r2, r2
 80014ea:	401a      	ands	r2, r3
 80014ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	22ff      	movs	r2, #255	; 0xff
 80014f4:	401a      	ands	r2, r3
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	2303      	movs	r3, #3
 80014fe:	4003      	ands	r3, r0
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <__NVIC_SetPriority+0xd8>)
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	001c      	movs	r4, r3
 800150c:	230f      	movs	r3, #15
 800150e:	4023      	ands	r3, r4
 8001510:	3b08      	subs	r3, #8
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	430a      	orrs	r2, r1
 8001516:	3306      	adds	r3, #6
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	18c3      	adds	r3, r0, r3
 800151c:	3304      	adds	r3, #4
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b003      	add	sp, #12
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	045b      	lsls	r3, r3, #17
 8001540:	429a      	cmp	r2, r3
 8001542:	d301      	bcc.n	8001548 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001544:	2301      	movs	r3, #1
 8001546:	e010      	b.n	800156a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <SysTick_Config+0x44>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	3a01      	subs	r2, #1
 800154e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001550:	2301      	movs	r3, #1
 8001552:	425b      	negs	r3, r3
 8001554:	2103      	movs	r1, #3
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff ff7c 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x44>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x44>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	210f      	movs	r1, #15
 8001584:	187b      	adds	r3, r7, r1
 8001586:	1c02      	adds	r2, r0, #0
 8001588:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	187b      	adds	r3, r7, r1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ffbf 	bl	8001530 <SysTick_Config>
 80015b2:	0003      	movs	r3, r0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015d2:	e14f      	b.n	8001874 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4091      	lsls	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d100      	bne.n	80015ec <HAL_GPIO_Init+0x30>
 80015ea:	e140      	b.n	800186e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	43da      	mvns	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	2201      	movs	r2, #1
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	4013      	ands	r3, r2
 800166e:	2b03      	cmp	r3, #3
 8001670:	d017      	beq.n	80016a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d123      	bne.n	80016f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	58d3      	ldr	r3, [r2, r3]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2107      	movs	r1, #7
 80016da:	400b      	ands	r3, r1
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	6939      	ldr	r1, [r7, #16]
 80016f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	43da      	mvns	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	401a      	ands	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	23c0      	movs	r3, #192	; 0xc0
 8001730:	029b      	lsls	r3, r3, #10
 8001732:	4013      	ands	r3, r2
 8001734:	d100      	bne.n	8001738 <HAL_GPIO_Init+0x17c>
 8001736:	e09a      	b.n	800186e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	4b54      	ldr	r3, [pc, #336]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_GPIO_Init+0x2d4>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	589b      	ldr	r3, [r3, r2]
 8001750:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	429a      	cmp	r2, r3
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x1ea>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a47      	ldr	r2, [pc, #284]	; (8001894 <HAL_GPIO_Init+0x2d8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x1e6>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a46      	ldr	r2, [pc, #280]	; (8001898 <HAL_GPIO_Init+0x2dc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x1e2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a45      	ldr	r2, [pc, #276]	; (800189c <HAL_GPIO_Init+0x2e0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x1de>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <HAL_GPIO_Init+0x2e4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x1da>
 8001792:	2305      	movs	r3, #5
 8001794:	e008      	b.n	80017a8 <HAL_GPIO_Init+0x1ec>
 8001796:	2306      	movs	r3, #6
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x1ec>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x1ec>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x1ec>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x1ec>
 80017a6:	2300      	movs	r3, #0
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	2103      	movs	r1, #3
 80017ac:	400a      	ands	r2, r1
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	4935      	ldr	r1, [pc, #212]	; (8001890 <HAL_GPIO_Init+0x2d4>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	035b      	lsls	r3, r3, #13
 80017de:	4013      	ands	r3, r2
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017f0:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43da      	mvns	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	039b      	lsls	r3, r3, #14
 8001808:	4013      	ands	r3, r2
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43da      	mvns	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	029b      	lsls	r3, r3, #10
 8001832:	4013      	ands	r3, r2
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43da      	mvns	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	4013      	ands	r3, r2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	40da      	lsrs	r2, r3
 800187c:	1e13      	subs	r3, r2, #0
 800187e:	d000      	beq.n	8001882 <HAL_GPIO_Init+0x2c6>
 8001880:	e6a8      	b.n	80015d4 <HAL_GPIO_Init+0x18>
  }
}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b006      	add	sp, #24
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000
 8001894:	50000400 	.word	0x50000400
 8001898:	50000800 	.word	0x50000800
 800189c:	50000c00 	.word	0x50000c00
 80018a0:	50001c00 	.word	0x50001c00
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	0008      	movs	r0, r1
 80018b2:	0011      	movs	r1, r2
 80018b4:	1cbb      	adds	r3, r7, #2
 80018b6:	1c02      	adds	r2, r0, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	1c7b      	adds	r3, r7, #1
 80018bc:	1c0a      	adds	r2, r1, #0
 80018be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c0:	1c7b      	adds	r3, r7, #1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f000 fbaf 	bl	8002056 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f8:	4bcf      	ldr	r3, [pc, #828]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	220c      	movs	r2, #12
 80018fe:	4013      	ands	r3, r2
 8001900:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001902:	4bcd      	ldr	r3, [pc, #820]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4013      	ands	r3, r2
 800190c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d100      	bne.n	800191a <HAL_RCC_OscConfig+0x36>
 8001918:	e07e      	b.n	8001a18 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d007      	beq.n	8001930 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d112      	bne.n	800194c <HAL_RCC_OscConfig+0x68>
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	429a      	cmp	r2, r3
 800192e:	d10d      	bne.n	800194c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	4bc1      	ldr	r3, [pc, #772]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x5a>
 800193c:	e06b      	b.n	8001a16 <HAL_RCC_OscConfig+0x132>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d167      	bne.n	8001a16 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	f000 fb85 	bl	8002056 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	429a      	cmp	r2, r3
 8001956:	d107      	bne.n	8001968 <HAL_RCC_OscConfig+0x84>
 8001958:	4bb7      	ldr	r3, [pc, #732]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4bb6      	ldr	r3, [pc, #728]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	0249      	lsls	r1, r1, #9
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e027      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	23a0      	movs	r3, #160	; 0xa0
 800196e:	02db      	lsls	r3, r3, #11
 8001970:	429a      	cmp	r2, r3
 8001972:	d10e      	bne.n	8001992 <HAL_RCC_OscConfig+0xae>
 8001974:	4bb0      	ldr	r3, [pc, #704]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4baf      	ldr	r3, [pc, #700]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	02c9      	lsls	r1, r1, #11
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	4bad      	ldr	r3, [pc, #692]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4bac      	ldr	r3, [pc, #688]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0249      	lsls	r1, r1, #9
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e012      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 8001992:	4ba9      	ldr	r3, [pc, #676]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4ba8      	ldr	r3, [pc, #672]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001998:	49a8      	ldr	r1, [pc, #672]	; (8001c3c <HAL_RCC_OscConfig+0x358>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4ba6      	ldr	r3, [pc, #664]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4ba2      	ldr	r3, [pc, #648]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4ba1      	ldr	r3, [pc, #644]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 80019b2:	49a3      	ldr	r1, [pc, #652]	; (8001c40 <HAL_RCC_OscConfig+0x35c>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d015      	beq.n	80019ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fd1a 	bl	80013f8 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff fd15 	bl	80013f8 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d902      	bls.n	80019de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	f000 fb3c 	bl	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019de:	4b96      	ldr	r3, [pc, #600]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	029b      	lsls	r3, r3, #10
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0ef      	beq.n	80019ca <HAL_RCC_OscConfig+0xe6>
 80019ea:	e015      	b.n	8001a18 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fd04 	bl	80013f8 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f6:	f7ff fcff 	bl	80013f8 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e326      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a08:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x112>
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d100      	bne.n	8001a24 <HAL_RCC_OscConfig+0x140>
 8001a22:	e08b      	b.n	8001b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d13e      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1d0>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d13b      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a3c:	4b7e      	ldr	r3, [pc, #504]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2204      	movs	r2, #4
 8001a42:	4013      	ands	r3, r2
 8001a44:	d004      	beq.n	8001a50 <HAL_RCC_OscConfig+0x16c>
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e302      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b79      	ldr	r3, [pc, #484]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a7b      	ldr	r2, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0x360>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	021a      	lsls	r2, r3, #8
 8001a60:	4b75      	ldr	r3, [pc, #468]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a66:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2209      	movs	r2, #9
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4b71      	ldr	r3, [pc, #452]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a78:	f000 fc40 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8001a7c:	0001      	movs	r1, r0
 8001a7e:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	220f      	movs	r2, #15
 8001a86:	4013      	ands	r3, r2
 8001a88:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x364>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	000a      	movs	r2, r1
 8001a8e:	40da      	lsrs	r2, r3
 8001a90:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x368>)
 8001a92:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a94:	4b6e      	ldr	r3, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x36c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2513      	movs	r5, #19
 8001a9a:	197c      	adds	r4, r7, r5
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fc65 	bl	800136c <HAL_InitTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001aa6:	197b      	adds	r3, r7, r5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d046      	beq.n	8001b3c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	e2d0      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d027      	beq.n	8001b0a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2209      	movs	r2, #9
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fc94 	bl	80013f8 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fc8f 	bl	80013f8 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e2b6      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2204      	movs	r2, #4
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0f1      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a53      	ldr	r2, [pc, #332]	; (8001c44 <HAL_RCC_OscConfig+0x360>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	021a      	lsls	r2, r3, #8
 8001b02:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	e018      	b.n	8001b3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b10:	2101      	movs	r1, #1
 8001b12:	438a      	bics	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fc6f 	bl	80013f8 <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff fc6a 	bl	80013f8 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e291      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f1      	bne.n	8001b20 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2210      	movs	r2, #16
 8001b42:	4013      	ands	r3, r2
 8001b44:	d100      	bne.n	8001b48 <HAL_RCC_OscConfig+0x264>
 8001b46:	e0a1      	b.n	8001c8c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d140      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4013      	ands	r3, r2
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x282>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e277      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x370>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	0a19      	lsrs	r1, r3, #8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	061a      	lsls	r2, r3, #24
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	0b5b      	lsrs	r3, r3, #13
 8001b94:	3301      	adds	r3, #1
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0212      	lsls	r2, r2, #8
 8001b9a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	4928      	ldr	r1, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x364>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x368>)
 8001bae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x36c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2513      	movs	r5, #19
 8001bb6:	197c      	adds	r4, r7, r5
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff fbd7 	bl	800136c <HAL_InitTick>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bc2:	197b      	adds	r3, r7, r5
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d060      	beq.n	8001c8c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001bca:	197b      	adds	r3, r7, r5
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	e242      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03f      	beq.n	8001c58 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	0049      	lsls	r1, r1, #1
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fc07 	bl	80013f8 <HAL_GetTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fc02 	bl	80013f8 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e229      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x370>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	0a19      	lsrs	r1, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	061a      	lsls	r2, r3, #24
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <HAL_RCC_OscConfig+0x354>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e029      	b.n	8001c8c <HAL_RCC_OscConfig+0x3a8>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	fffeffff 	.word	0xfffeffff
 8001c40:	fffbffff 	.word	0xfffbffff
 8001c44:	ffffe0ff 	.word	0xffffe0ff
 8001c48:	08005648 	.word	0x08005648
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c58:	4bbd      	ldr	r3, [pc, #756]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4bbc      	ldr	r3, [pc, #752]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001c5e:	49bd      	ldr	r1, [pc, #756]	; (8001f54 <HAL_RCC_OscConfig+0x670>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fbc8 	bl	80013f8 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fbc3 	bl	80013f8 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1ea      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c80:	4bb3      	ldr	r3, [pc, #716]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	4013      	ands	r3, r2
 8001c94:	d036      	beq.n	8001d04 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca2:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fba5 	bl	80013f8 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fba0 	bl	80013f8 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1c7      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cc6:	4ba2      	ldr	r3, [pc, #648]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d0f1      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x3d0>
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b9f      	ldr	r3, [pc, #636]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd6:	4b9e      	ldr	r3, [pc, #632]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	438a      	bics	r2, r1
 8001cdc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fb8b 	bl	80013f8 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb86 	bl	80013f8 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1ad      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cfa:	4b95      	ldr	r3, [pc, #596]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	d1f1      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_RCC_OscConfig+0x42c>
 8001d0e:	e0ae      	b.n	8001e6e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d10:	2027      	movs	r0, #39	; 0x27
 8001d12:	183b      	adds	r3, r7, r0
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d18:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	d109      	bne.n	8001d38 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b8a      	ldr	r3, [pc, #552]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0549      	lsls	r1, r1, #21
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b87      	ldr	r3, [pc, #540]	; (8001f58 <HAL_RCC_OscConfig+0x674>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d11a      	bne.n	8001d7a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_RCC_OscConfig+0x674>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_RCC_OscConfig+0x674>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fb51 	bl	80013f8 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7ff fb4c 	bl	80013f8 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e173      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x674>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4b2>
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0049      	lsls	r1, r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	651a      	str	r2, [r3, #80]	; 0x50
 8001d94:	e031      	b.n	8001dfa <HAL_RCC_OscConfig+0x516>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4d4>
 8001d9e:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da2:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001da4:	496b      	ldr	r1, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x670>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
 8001daa:	4b69      	ldr	r3, [pc, #420]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dae:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001db0:	496a      	ldr	r1, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x678>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	651a      	str	r2, [r3, #80]	; 0x50
 8001db6:	e020      	b.n	8001dfa <HAL_RCC_OscConfig+0x516>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	23a0      	movs	r3, #160	; 0xa0
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d10e      	bne.n	8001de2 <HAL_RCC_OscConfig+0x4fe>
 8001dc4:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc8:	4b61      	ldr	r3, [pc, #388]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	00c9      	lsls	r1, r1, #3
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd6:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	0049      	lsls	r1, r1, #1
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x516>
 8001de2:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de6:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001de8:	495a      	ldr	r1, [pc, #360]	; (8001f54 <HAL_RCC_OscConfig+0x670>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	651a      	str	r2, [r3, #80]	; 0x50
 8001dee:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001df4:	4959      	ldr	r1, [pc, #356]	; (8001f5c <HAL_RCC_OscConfig+0x678>)
 8001df6:	400a      	ands	r2, r1
 8001df8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d015      	beq.n	8001e2e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff faf9 	bl	80013f8 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0a:	e009      	b.n	8001e20 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff faf4 	bl	80013f8 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_RCC_OscConfig+0x67c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e11a      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0ef      	beq.n	8001e0c <HAL_RCC_OscConfig+0x528>
 8001e2c:	e014      	b.n	8001e58 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fae3 	bl	80013f8 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7ff fade 	bl	80013f8 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x67c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e104      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4013      	ands	r3, r2
 8001e56:	d1ef      	bne.n	8001e38 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e58:	2327      	movs	r3, #39	; 0x27
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e68:	493e      	ldr	r1, [pc, #248]	; (8001f64 <HAL_RCC_OscConfig+0x680>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2220      	movs	r2, #32
 8001e74:	4013      	ands	r3, r2
 8001e76:	d049      	beq.n	8001f0c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d026      	beq.n	8001ece <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	430a      	orrs	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_RCC_OscConfig+0x684>)
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <HAL_RCC_OscConfig+0x684>)
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	0189      	lsls	r1, r1, #6
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff faa7 	bl	80013f8 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb0:	f7ff faa2 	bl	80013f8 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0c9      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f1      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x5cc>
 8001ecc:	e01e      	b.n	8001f0c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	438a      	bics	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_RCC_OscConfig+0x684>)
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_OscConfig+0x684>)
 8001ee0:	4922      	ldr	r1, [pc, #136]	; (8001f6c <HAL_RCC_OscConfig+0x688>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fa87 	bl	80013f8 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef0:	f7ff fa82 	bl	80013f8 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0a9      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d1f1      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d100      	bne.n	8001f16 <HAL_RCC_OscConfig+0x632>
 8001f14:	e09e      	b.n	8002054 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x63a>
 8001f1c:	e077      	b.n	800200e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d158      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_OscConfig+0x66c>)
 8001f2c:	4910      	ldr	r1, [pc, #64]	; (8001f70 <HAL_RCC_OscConfig+0x68c>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa61 	bl	80013f8 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f3a:	e01b      	b.n	8001f74 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff fa5c 	bl	80013f8 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d914      	bls.n	8001f74 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e083      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40021000 	.word	0x40021000
 8001f54:	fffffeff 	.word	0xfffffeff
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	fffffbff 	.word	0xfffffbff
 8001f60:	00001388 	.word	0x00001388
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	ffffdfff 	.word	0xffffdfff
 8001f70:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f74:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	049b      	lsls	r3, r3, #18
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d1dd      	bne.n	8001f3c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	0449      	lsls	r1, r1, #17
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fa23 	bl	80013f8 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fa1e 	bl	80013f8 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e045      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	049b      	lsls	r3, r3, #18
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x6d4>
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8001fde:	4922      	ldr	r1, [pc, #136]	; (8002068 <HAL_RCC_OscConfig+0x784>)
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fa08 	bl	80013f8 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fa03 	bl	80013f8 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e02a      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	049b      	lsls	r3, r3, #18
 8002008:	4013      	ands	r3, r2
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x70a>
 800200c:	e022      	b.n	8002054 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e01d      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x77c>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	429a      	cmp	r2, r3
 800202e:	d10f      	bne.n	8002050 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	23f0      	movs	r3, #240	; 0xf0
 8002034:	039b      	lsls	r3, r3, #14
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	23c0      	movs	r3, #192	; 0xc0
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b00a      	add	sp, #40	; 0x28
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40021000 	.word	0x40021000
 8002064:	ff02ffff 	.word	0xff02ffff
 8002068:	feffffff 	.word	0xfeffffff

0800206c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e128      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b96      	ldr	r3, [pc, #600]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d91e      	bls.n	80020cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b93      	ldr	r3, [pc, #588]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	4b90      	ldr	r3, [pc, #576]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020a0:	f7ff f9aa 	bl	80013f8 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a8:	e009      	b.n	80020be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7ff f9a5 	bl	80013f8 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a8a      	ldr	r2, [pc, #552]	; (80022e0 <HAL_RCC_ClockConfig+0x274>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e109      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b87      	ldr	r3, [pc, #540]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1ee      	bne.n	80020aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d6:	4b83      	ldr	r3, [pc, #524]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	22f0      	movs	r2, #240	; 0xf0
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b7f      	ldr	r3, [pc, #508]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d100      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x8a>
 80020f4:	e089      	b.n	800220a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fe:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	4013      	ands	r3, r2
 8002108:	d120      	bne.n	800214c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0e1      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002116:	4b73      	ldr	r3, [pc, #460]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	049b      	lsls	r3, r3, #18
 800211e:	4013      	ands	r3, r2
 8002120:	d114      	bne.n	800214c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0d5      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800212e:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2204      	movs	r2, #4
 8002134:	4013      	ands	r3, r2
 8002136:	d109      	bne.n	800214c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0ca      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800213c:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0c2      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214c:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2203      	movs	r2, #3
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7ff f94a 	bl	80013f8 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d111      	bne.n	8002194 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002170:	e009      	b.n	8002186 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7ff f941 	bl	80013f8 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_RCC_ClockConfig+0x274>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0a5      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	220c      	movs	r2, #12
 800218c:	4013      	ands	r3, r2
 800218e:	2b08      	cmp	r3, #8
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_ClockConfig+0x106>
 8002192:	e03a      	b.n	800220a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d111      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219c:	e009      	b.n	80021b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219e:	f7ff f92b 	bl	80013f8 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_RCC_ClockConfig+0x274>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e08f      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	220c      	movs	r2, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d1ef      	bne.n	800219e <HAL_RCC_ClockConfig+0x132>
 80021be:	e024      	b.n	800220a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d11b      	bne.n	8002200 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c8:	e009      	b.n	80021de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7ff f915 	bl	80013f8 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a42      	ldr	r2, [pc, #264]	; (80022e0 <HAL_RCC_ClockConfig+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e079      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	220c      	movs	r2, #12
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d1ef      	bne.n	80021ca <HAL_RCC_ClockConfig+0x15e>
 80021ea:	e00e      	b.n	800220a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7ff f904 	bl	80013f8 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <HAL_RCC_ClockConfig+0x274>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e068      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	220c      	movs	r2, #12
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d21e      	bcs.n	8002256 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002218:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	4393      	bics	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800222a:	f7ff f8e5 	bl	80013f8 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	e009      	b.n	8002248 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff f8e0 	bl	80013f8 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_RCC_ClockConfig+0x274>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e044      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_ClockConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2204      	movs	r2, #4
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <HAL_RCC_ClockConfig+0x27c>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002270:	430a      	orrs	r2, r1
 8002272:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2208      	movs	r2, #8
 800227a:	4013      	ands	r3, r2
 800227c:	d00a      	beq.n	8002294 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_RCC_ClockConfig+0x280>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	00da      	lsls	r2, r3, #3
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002294:	f000 f832 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8002298:	0001      	movs	r1, r0
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x278>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	220f      	movs	r2, #15
 80022a2:	4013      	ands	r3, r2
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x284>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	000a      	movs	r2, r1
 80022aa:	40da      	lsrs	r2, r3
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_ClockConfig+0x288>)
 80022ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_RCC_ClockConfig+0x28c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	250b      	movs	r5, #11
 80022b6:	197c      	adds	r4, r7, r5
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff f857 	bl	800136c <HAL_InitTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022c2:	197b      	adds	r3, r7, r5
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022ca:	197b      	adds	r3, r7, r5
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bdb0      	pop	{r4, r5, r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40022000 	.word	0x40022000
 80022e0:	00001388 	.word	0x00001388
 80022e4:	40021000 	.word	0x40021000
 80022e8:	fffff8ff 	.word	0xfffff8ff
 80022ec:	ffffc7ff 	.word	0xffffc7ff
 80022f0:	08005648 	.word	0x08005648
 80022f4:	20000008 	.word	0x20000008
 80022f8:	2000000c 	.word	0x2000000c

080022fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b08e      	sub	sp, #56	; 0x38
 8002300:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002302:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_GetSysClockFreq+0x138>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	230c      	movs	r3, #12
 800230c:	4013      	ands	r3, r2
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d014      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x40>
 8002312:	d900      	bls.n	8002316 <HAL_RCC_GetSysClockFreq+0x1a>
 8002314:	e07b      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x112>
 8002316:	2b04      	cmp	r3, #4
 8002318:	d002      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x24>
 800231a:	2b08      	cmp	r3, #8
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x3a>
 800231e:	e076      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002320:	4b44      	ldr	r3, [pc, #272]	; (8002434 <HAL_RCC_GetSysClockFreq+0x138>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2210      	movs	r2, #16
 8002326:	4013      	ands	r3, r2
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_GetSysClockFreq+0x13c>)
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800232e:	e07c      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002330:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_RCC_GetSysClockFreq+0x140>)
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002334:	e079      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002336:	4b42      	ldr	r3, [pc, #264]	; (8002440 <HAL_RCC_GetSysClockFreq+0x144>)
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800233a:	e076      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	0c9a      	lsrs	r2, r3, #18
 8002340:	230f      	movs	r3, #15
 8002342:	401a      	ands	r2, r3
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_GetSysClockFreq+0x148>)
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	0d9a      	lsrs	r2, r3, #22
 800234e:	2303      	movs	r3, #3
 8002350:	4013      	ands	r3, r2
 8002352:	3301      	adds	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCC_GetSysClockFreq+0x138>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	4013      	ands	r3, r2
 8002360:	d01a      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	4a35      	ldr	r2, [pc, #212]	; (8002440 <HAL_RCC_GetSysClockFreq+0x144>)
 800236c:	2300      	movs	r3, #0
 800236e:	69b8      	ldr	r0, [r7, #24]
 8002370:	69f9      	ldr	r1, [r7, #28]
 8002372:	f7fd ff7f 	bl	8000274 <__aeabi_lmul>
 8002376:	0002      	movs	r2, r0
 8002378:	000b      	movs	r3, r1
 800237a:	0010      	movs	r0, r2
 800237c:	0019      	movs	r1, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f7fd ff53 	bl	8000234 <__aeabi_uldivmod>
 800238e:	0002      	movs	r2, r0
 8002390:	000b      	movs	r3, r1
 8002392:	0013      	movs	r3, r2
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
 8002396:	e037      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002398:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_GetSysClockFreq+0x138>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	4013      	ands	r3, r2
 80023a0:	d01a      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023ac:	2300      	movs	r3, #0
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	f7fd ff5f 	bl	8000274 <__aeabi_lmul>
 80023b6:	0002      	movs	r2, r0
 80023b8:	000b      	movs	r3, r1
 80023ba:	0010      	movs	r0, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f7fd ff33 	bl	8000234 <__aeabi_uldivmod>
 80023ce:	0002      	movs	r2, r0
 80023d0:	000b      	movs	r3, r1
 80023d2:	0013      	movs	r3, r2
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
 80023d6:	e017      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	0018      	movs	r0, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	0019      	movs	r1, r3
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <HAL_RCC_GetSysClockFreq+0x140>)
 80023e2:	2300      	movs	r3, #0
 80023e4:	f7fd ff46 	bl	8000274 <__aeabi_lmul>
 80023e8:	0002      	movs	r2, r0
 80023ea:	000b      	movs	r3, r1
 80023ec:	0010      	movs	r0, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	001c      	movs	r4, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	001d      	movs	r5, r3
 80023f8:	0022      	movs	r2, r4
 80023fa:	002b      	movs	r3, r5
 80023fc:	f7fd ff1a 	bl	8000234 <__aeabi_uldivmod>
 8002400:	0002      	movs	r2, r0
 8002402:	000b      	movs	r3, r1
 8002404:	0013      	movs	r3, r2
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800240c:	e00d      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_GetSysClockFreq+0x138>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0b5b      	lsrs	r3, r3, #13
 8002414:	2207      	movs	r2, #7
 8002416:	4013      	ands	r3, r2
 8002418:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	3301      	adds	r3, #1
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	0212      	lsls	r2, r2, #8
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002428:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b00e      	add	sp, #56	; 0x38
 8002432:	bdb0      	pop	{r4, r5, r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	003d0900 	.word	0x003d0900
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200
 8002444:	08005660 	.word	0x08005660

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCC_GetHCLKFreq+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	20000008 	.word	0x20000008

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002464:	0001      	movs	r1, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d9      	lsrs	r1, r3
 8002476:	000b      	movs	r3, r1
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	08005658 	.word	0x08005658

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800248c:	f7ff ffdc 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002490:	0001      	movs	r1, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	2207      	movs	r2, #7
 800249a:	4013      	ands	r3, r2
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	40d9      	lsrs	r1, r3
 80024a2:	000b      	movs	r3, r1
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08005658 	.word	0x08005658

080024b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80024bc:	2317      	movs	r3, #23
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2220      	movs	r2, #32
 80024ca:	4013      	ands	r3, r2
 80024cc:	d106      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	d100      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80024da:	e104      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024dc:	4bb1      	ldr	r3, [pc, #708]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	055b      	lsls	r3, r3, #21
 80024e4:	4013      	ands	r3, r2
 80024e6:	d10a      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4bae      	ldr	r3, [pc, #696]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ec:	4bad      	ldr	r3, [pc, #692]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0549      	lsls	r1, r1, #21
 80024f2:	430a      	orrs	r2, r1
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80024f6:	2317      	movs	r3, #23
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4baa      	ldr	r3, [pc, #680]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4013      	ands	r3, r2
 8002508:	d11a      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250a:	4ba7      	ldr	r3, [pc, #668]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4ba6      	ldr	r3, [pc, #664]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	0049      	lsls	r1, r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002518:	f7fe ff6e 	bl	80013f8 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe ff69 	bl	80013f8 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e133      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	4b9c      	ldr	r3, [pc, #624]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d0f0      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002540:	4b98      	ldr	r3, [pc, #608]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	039b      	lsls	r3, r3, #14
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	039b      	lsls	r3, r3, #14
 8002554:	4013      	ands	r3, r2
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d107      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	23c0      	movs	r3, #192	; 0xc0
 8002562:	039b      	lsls	r3, r3, #14
 8002564:	4013      	ands	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d013      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	23c0      	movs	r3, #192	; 0xc0
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	401a      	ands	r2, r3
 8002576:	23c0      	movs	r3, #192	; 0xc0
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	429a      	cmp	r2, r3
 800257c:	d10a      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800257e:	4b89      	ldr	r3, [pc, #548]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	401a      	ands	r2, r3
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	429a      	cmp	r2, r3
 800258e:	d101      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e103      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002594:	4b83      	ldr	r3, [pc, #524]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002598:	23c0      	movs	r3, #192	; 0xc0
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d049      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	4013      	ands	r3, r2
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d004      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2220      	movs	r2, #32
 80025bc:	4013      	ands	r3, r2
 80025be:	d10d      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d034      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4013      	ands	r3, r2
 80025da:	d02e      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80025dc:	4b71      	ldr	r3, [pc, #452]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	4a72      	ldr	r2, [pc, #456]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e6:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ea:	4b6e      	ldr	r3, [pc, #440]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0309      	lsls	r1, r1, #12
 80025f0:	430a      	orrs	r2, r1
 80025f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f4:	4b6b      	ldr	r3, [pc, #428]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025fa:	496d      	ldr	r1, [pc, #436]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4013      	ands	r3, r2
 800260e:	d014      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fef2 	bl	80013f8 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002618:	e009      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe feed 	bl	80013f8 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a63      	ldr	r2, [pc, #396]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0b6      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d0ef      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	4013      	ands	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	23c0      	movs	r3, #192	; 0xc0
 800264c:	029b      	lsls	r3, r3, #10
 800264e:	401a      	ands	r2, r3
 8002650:	23c0      	movs	r3, #192	; 0xc0
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	429a      	cmp	r2, r3
 8002656:	d10c      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002658:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a56      	ldr	r2, [pc, #344]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	23c0      	movs	r3, #192	; 0xc0
 8002668:	039b      	lsls	r3, r3, #14
 800266a:	401a      	ands	r2, r3
 800266c:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002674:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	23c0      	movs	r3, #192	; 0xc0
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	401a      	ands	r2, r3
 8002680:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002682:	430a      	orrs	r2, r1
 8002684:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2220      	movs	r2, #32
 800268c:	4013      	ands	r3, r2
 800268e:	d01f      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	23c0      	movs	r3, #192	; 0xc0
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	401a      	ands	r2, r3
 800269a:	23c0      	movs	r3, #192	; 0xc0
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	429a      	cmp	r2, r3
 80026a0:	d10c      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a44      	ldr	r2, [pc, #272]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	039b      	lsls	r3, r3, #14
 80026b4:	401a      	ands	r2, r3
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	23c0      	movs	r3, #192	; 0xc0
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	401a      	ands	r2, r3
 80026ca:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026d0:	2317      	movs	r3, #23
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026e0:	4936      	ldr	r1, [pc, #216]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	2203      	movs	r2, #3
 80026f6:	4393      	bics	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002700:	430a      	orrs	r2, r1
 8002702:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	220c      	movs	r2, #12
 8002714:	4393      	bics	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800271e:	430a      	orrs	r2, r1
 8002720:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800273c:	430a      	orrs	r2, r1
 800273e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800275a:	430a      	orrs	r2, r1
 800275c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	4013      	ands	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002778:	430a      	orrs	r2, r1
 800277a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	4013      	ands	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002796:	430a      	orrs	r2, r1
 8002798:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b006      	add	sp, #24
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
 80027ac:	fffcffff 	.word	0xfffcffff
 80027b0:	fff7ffff 	.word	0xfff7ffff
 80027b4:	00001388 	.word	0x00001388
 80027b8:	ffcfffff 	.word	0xffcfffff
 80027bc:	efffffff 	.word	0xefffffff
 80027c0:	fffff3ff 	.word	0xfffff3ff
 80027c4:	ffffcfff 	.word	0xffffcfff
 80027c8:	fbffffff 	.word	0xfbffffff
 80027cc:	fff3ffff 	.word	0xfff3ffff

080027d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e083      	b.n	80028ea <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	2382      	movs	r3, #130	; 0x82
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d009      	beq.n	800280a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	61da      	str	r2, [r3, #28]
 80027fc:	e005      	b.n	800280a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2251      	movs	r2, #81	; 0x51
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2250      	movs	r2, #80	; 0x50
 8002820:	2100      	movs	r1, #0
 8002822:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f7fe fc7a 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2251      	movs	r2, #81	; 0x51
 8002830:	2102      	movs	r1, #2
 8002832:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2140      	movs	r1, #64	; 0x40
 8002840:	438a      	bics	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	2382      	movs	r3, #130	; 0x82
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	401a      	ands	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	2384      	movs	r3, #132	; 0x84
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	400b      	ands	r3, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68d9      	ldr	r1, [r3, #12]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	400b      	ands	r3, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2102      	movs	r1, #2
 800286c:	400b      	ands	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2101      	movs	r1, #1
 8002876:	400b      	ands	r3, r1
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	400b      	ands	r3, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	2138      	movs	r1, #56	; 0x38
 800288c:	400b      	ands	r3, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	400b      	ands	r3, r1
 8002898:	431a      	orrs	r2, r3
 800289a:	0011      	movs	r1, r2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	401a      	ands	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	2204      	movs	r2, #4
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	2210      	movs	r2, #16
 80028c0:	401a      	ands	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4907      	ldr	r1, [pc, #28]	; (80028f4 <HAL_SPI_Init+0x124>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2251      	movs	r2, #81	; 0x51
 80028e4:	2101      	movs	r1, #1
 80028e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	fffff7ff 	.word	0xfffff7ff

080028f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	1dbb      	adds	r3, r7, #6
 8002906:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002908:	231f      	movs	r3, #31
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2250      	movs	r2, #80	; 0x50
 8002914:	5c9b      	ldrb	r3, [r3, r2]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_SPI_Transmit+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e145      	b.n	8002baa <HAL_SPI_Transmit+0x2b2>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2250      	movs	r2, #80	; 0x50
 8002922:	2101      	movs	r1, #1
 8002924:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002926:	f7fe fd67 	bl	80013f8 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800292e:	2316      	movs	r3, #22
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	1dba      	adds	r2, r7, #6
 8002934:	8812      	ldrh	r2, [r2, #0]
 8002936:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2251      	movs	r2, #81	; 0x51
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d004      	beq.n	800294e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002944:	231f      	movs	r3, #31
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
    goto error;
 800294c:	e126      	b.n	8002b9c <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_SPI_Transmit+0x64>
 8002954:	1dbb      	adds	r3, r7, #6
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800295c:	231f      	movs	r3, #31
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
    goto error;
 8002964:	e11a      	b.n	8002b9c <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2251      	movs	r2, #81	; 0x51
 800296a:	2103      	movs	r1, #3
 800296c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1dba      	adds	r2, r7, #6
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1dba      	adds	r2, r7, #6
 8002986:	8812      	ldrh	r2, [r2, #0]
 8002988:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d110      	bne.n	80029d6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2140      	movs	r1, #64	; 0x40
 80029c0:	438a      	bics	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	01c9      	lsls	r1, r1, #7
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2240      	movs	r2, #64	; 0x40
 80029de:	4013      	ands	r3, r2
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d007      	beq.n	80029f4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d152      	bne.n	8002aa6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_SPI_Transmit+0x11a>
 8002a08:	2316      	movs	r3, #22
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d143      	bne.n	8002a9a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	1c9a      	adds	r2, r3, #2
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a36:	e030      	b.n	8002a9a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d112      	bne.n	8002a6c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	1c9a      	adds	r2, r3, #2
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a6a:	e016      	b.n	8002a9a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a6c:	f7fe fcc4 	bl	80013f8 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d802      	bhi.n	8002a82 <HAL_SPI_Transmit+0x18a>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_SPI_Transmit+0x190>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002a88:	231f      	movs	r3, #31
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2251      	movs	r2, #81	; 0x51
 8002a94:	2101      	movs	r1, #1
 8002a96:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a98:	e080      	b.n	8002b9c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1c9      	bne.n	8002a38 <HAL_SPI_Transmit+0x140>
 8002aa4:	e053      	b.n	8002b4e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_SPI_Transmit+0x1c0>
 8002aae:	2316      	movs	r3, #22
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d145      	bne.n	8002b44 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ade:	e031      	b.n	8002b44 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d113      	bne.n	8002b16 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b14:	e016      	b.n	8002b44 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b16:	f7fe fc6f 	bl	80013f8 <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d802      	bhi.n	8002b2c <HAL_SPI_Transmit+0x234>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_SPI_Transmit+0x23a>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d108      	bne.n	8002b44 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8002b32:	231f      	movs	r3, #31
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2203      	movs	r2, #3
 8002b38:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2251      	movs	r2, #81	; 0x51
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b42:	e02b      	b.n	8002b9c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1c8      	bne.n	8002ae0 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 f8bb 	bl	8002cd0 <SPI_EndRxTxTransaction>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e003      	b.n	8002b9c <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2251      	movs	r2, #81	; 0x51
 8002b98:	2101      	movs	r1, #1
 8002b9a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2250      	movs	r2, #80	; 0x50
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b008      	add	sp, #32
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bc4:	f7fe fc18 	bl	80013f8 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bd4:	f7fe fc10 	bl	80013f8 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	015b      	lsls	r3, r3, #5
 8002be2:	0d1b      	lsrs	r3, r3, #20
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	4353      	muls	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bea:	e058      	b.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	d055      	beq.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bf2:	f7fe fc01 	bl	80013f8 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d902      	bls.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d142      	bne.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	21e0      	movs	r1, #224	; 0xe0
 8002c14:	438a      	bics	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	2382      	movs	r3, #130	; 0x82
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d113      	bne.n	8002c4c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d005      	beq.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	438a      	bics	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	019b      	lsls	r3, r3, #6
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d110      	bne.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	0189      	lsls	r1, r1, #6
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2251      	movs	r2, #81	; 0x51
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2250      	movs	r2, #80	; 0x50
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e017      	b.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	425a      	negs	r2, r3
 8002cae:	4153      	adcs	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	1dfb      	adds	r3, r7, #7
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d197      	bne.n	8002bec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b008      	add	sp, #32
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	20000008 	.word	0x20000008
 8002ccc:	ffffdfff 	.word	0xffffdfff

08002cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <SPI_EndRxTxTransaction+0x84>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	491d      	ldr	r1, [pc, #116]	; (8002d58 <SPI_EndRxTxTransaction+0x88>)
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7fd fa1a 	bl	800011c <__udivsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	001a      	movs	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2382      	movs	r3, #130	; 0x82
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d112      	bne.n	8002d2c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	0013      	movs	r3, r2
 8002d10:	2200      	movs	r2, #0
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	f7ff ff4e 	bl	8002bb4 <SPI_WaitFlagStateUntilTimeout>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d016      	beq.n	8002d4a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	2220      	movs	r2, #32
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e00f      	b.n	8002d4c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b80      	cmp	r3, #128	; 0x80
 8002d44:	d0f2      	beq.n	8002d2c <SPI_EndRxTxTransaction+0x5c>
 8002d46:	e000      	b.n	8002d4a <SPI_EndRxTxTransaction+0x7a>
        break;
 8002d48:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b006      	add	sp, #24
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000008 	.word	0x20000008
 8002d58:	016e3600 	.word	0x016e3600

08002d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e044      	b.n	8002df8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2278      	movs	r2, #120	; 0x78
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7fe fa11 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2224      	movs	r2, #36	; 0x24
 8002d8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f916 	bl	8002fd0 <UART_SetConfig>
 8002da4:	0003      	movs	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e024      	b.n	8002df8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fb8d 	bl	80034d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	490d      	ldr	r1, [pc, #52]	; (8002e00 <HAL_UART_Init+0xa4>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	212a      	movs	r1, #42	; 0x2a
 8002dda:	438a      	bics	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fc25 	bl	8003640 <UART_CheckIdleState>
 8002df6:	0003      	movs	r3, r0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	ffffb7ff 	.word	0xffffb7ff

08002e04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	589b      	ldr	r3, [r3, r2]
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d000      	beq.n	8002e20 <HAL_UART_Receive+0x1c>
 8002e1e:	e0d0      	b.n	8002fc2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_UART_Receive+0x2a>
 8002e26:	1dbb      	adds	r3, r7, #6
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0c8      	b.n	8002fc4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	015b      	lsls	r3, r3, #5
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d109      	bne.n	8002e52 <HAL_UART_Receive+0x4e>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d001      	beq.n	8002e52 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0b8      	b.n	8002fc4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2284      	movs	r2, #132	; 0x84
 8002e56:	2100      	movs	r1, #0
 8002e58:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	2122      	movs	r1, #34	; 0x22
 8002e60:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e68:	f7fe fac6 	bl	80013f8 <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1dba      	adds	r2, r7, #6
 8002e74:	2158      	movs	r1, #88	; 0x58
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1dba      	adds	r2, r7, #6
 8002e7e:	215a      	movs	r1, #90	; 0x5a
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	015b      	lsls	r3, r3, #5
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d10d      	bne.n	8002eac <HAL_UART_Receive+0xa8>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <HAL_UART_Receive+0x9e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	225c      	movs	r2, #92	; 0x5c
 8002e9c:	494b      	ldr	r1, [pc, #300]	; (8002fcc <HAL_UART_Receive+0x1c8>)
 8002e9e:	5299      	strh	r1, [r3, r2]
 8002ea0:	e02e      	b.n	8002f00 <HAL_UART_Receive+0xfc>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	225c      	movs	r2, #92	; 0x5c
 8002ea6:	21ff      	movs	r1, #255	; 0xff
 8002ea8:	5299      	strh	r1, [r3, r2]
 8002eaa:	e029      	b.n	8002f00 <HAL_UART_Receive+0xfc>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_UART_Receive+0xcc>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_UART_Receive+0xc2>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	225c      	movs	r2, #92	; 0x5c
 8002ec0:	21ff      	movs	r1, #255	; 0xff
 8002ec2:	5299      	strh	r1, [r3, r2]
 8002ec4:	e01c      	b.n	8002f00 <HAL_UART_Receive+0xfc>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	225c      	movs	r2, #92	; 0x5c
 8002eca:	217f      	movs	r1, #127	; 0x7f
 8002ecc:	5299      	strh	r1, [r3, r2]
 8002ece:	e017      	b.n	8002f00 <HAL_UART_Receive+0xfc>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	055b      	lsls	r3, r3, #21
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d10d      	bne.n	8002ef8 <HAL_UART_Receive+0xf4>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_UART_Receive+0xea>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	225c      	movs	r2, #92	; 0x5c
 8002ee8:	217f      	movs	r1, #127	; 0x7f
 8002eea:	5299      	strh	r1, [r3, r2]
 8002eec:	e008      	b.n	8002f00 <HAL_UART_Receive+0xfc>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	225c      	movs	r2, #92	; 0x5c
 8002ef2:	213f      	movs	r1, #63	; 0x3f
 8002ef4:	5299      	strh	r1, [r3, r2]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Receive+0xfc>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	225c      	movs	r2, #92	; 0x5c
 8002efc:	2100      	movs	r1, #0
 8002efe:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002f00:	2312      	movs	r3, #18
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	215c      	movs	r1, #92	; 0x5c
 8002f08:	5a52      	ldrh	r2, [r2, r1]
 8002f0a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	015b      	lsls	r3, r3, #5
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d108      	bne.n	8002f2a <HAL_UART_Receive+0x126>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e003      	b.n	8002f32 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f32:	e03a      	b.n	8002faa <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2120      	movs	r1, #32
 8002f42:	f000 fc25 	bl	8003790 <UART_WaitOnFlagUntilTimeout>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	2120      	movs	r1, #32
 8002f50:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e036      	b.n	8002fc4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2212      	movs	r2, #18
 8002f66:	18ba      	adds	r2, r7, r2
 8002f68:	8812      	ldrh	r2, [r2, #0]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e00e      	b.n	8002f98 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2212      	movs	r2, #18
 8002f84:	18ba      	adds	r2, r7, r2
 8002f86:	8812      	ldrh	r2, [r2, #0]
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3301      	adds	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	225a      	movs	r2, #90	; 0x5a
 8002f9c:	5a9b      	ldrh	r3, [r3, r2]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b299      	uxth	r1, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	225a      	movs	r2, #90	; 0x5a
 8002fa8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	225a      	movs	r2, #90	; 0x5a
 8002fae:	5a9b      	ldrh	r3, [r3, r2]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1be      	bne.n	8002f34 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	2120      	movs	r1, #32
 8002fbc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
  }
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b008      	add	sp, #32
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	000001ff 	.word	0x000001ff

08002fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b5b0      	push	{r4, r5, r7, lr}
 8002fd2:	b08e      	sub	sp, #56	; 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd8:	231a      	movs	r3, #26
 8002fda:	2218      	movs	r2, #24
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	19db      	adds	r3, r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4ac6      	ldr	r2, [pc, #792]	; (800331c <UART_SetConfig+0x34c>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4ac1      	ldr	r2, [pc, #772]	; (8003320 <UART_SetConfig+0x350>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4abb      	ldr	r2, [pc, #748]	; (8003324 <UART_SetConfig+0x354>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003040:	4313      	orrs	r3, r2
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4ab7      	ldr	r2, [pc, #732]	; (8003328 <UART_SetConfig+0x358>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4ab3      	ldr	r2, [pc, #716]	; (800332c <UART_SetConfig+0x35c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d131      	bne.n	80030c8 <UART_SetConfig+0xf8>
 8003064:	4bb2      	ldr	r3, [pc, #712]	; (8003330 <UART_SetConfig+0x360>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	2203      	movs	r2, #3
 800306a:	4013      	ands	r3, r2
 800306c:	2b03      	cmp	r3, #3
 800306e:	d01d      	beq.n	80030ac <UART_SetConfig+0xdc>
 8003070:	d823      	bhi.n	80030ba <UART_SetConfig+0xea>
 8003072:	2b02      	cmp	r3, #2
 8003074:	d00c      	beq.n	8003090 <UART_SetConfig+0xc0>
 8003076:	d820      	bhi.n	80030ba <UART_SetConfig+0xea>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <UART_SetConfig+0xb2>
 800307c:	2b01      	cmp	r3, #1
 800307e:	d00e      	beq.n	800309e <UART_SetConfig+0xce>
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0xea>
 8003082:	231b      	movs	r3, #27
 8003084:	2218      	movs	r2, #24
 8003086:	189b      	adds	r3, r3, r2
 8003088:	19db      	adds	r3, r3, r7
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e09c      	b.n	80031ca <UART_SetConfig+0x1fa>
 8003090:	231b      	movs	r3, #27
 8003092:	2218      	movs	r2, #24
 8003094:	189b      	adds	r3, r3, r2
 8003096:	19db      	adds	r3, r3, r7
 8003098:	2202      	movs	r2, #2
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e095      	b.n	80031ca <UART_SetConfig+0x1fa>
 800309e:	231b      	movs	r3, #27
 80030a0:	2218      	movs	r2, #24
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	19db      	adds	r3, r3, r7
 80030a6:	2204      	movs	r2, #4
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e08e      	b.n	80031ca <UART_SetConfig+0x1fa>
 80030ac:	231b      	movs	r3, #27
 80030ae:	2218      	movs	r2, #24
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	19db      	adds	r3, r3, r7
 80030b4:	2208      	movs	r2, #8
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e087      	b.n	80031ca <UART_SetConfig+0x1fa>
 80030ba:	231b      	movs	r3, #27
 80030bc:	2218      	movs	r2, #24
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	19db      	adds	r3, r3, r7
 80030c2:	2210      	movs	r2, #16
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e080      	b.n	80031ca <UART_SetConfig+0x1fa>
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a99      	ldr	r2, [pc, #612]	; (8003334 <UART_SetConfig+0x364>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d131      	bne.n	8003136 <UART_SetConfig+0x166>
 80030d2:	4b97      	ldr	r3, [pc, #604]	; (8003330 <UART_SetConfig+0x360>)
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	220c      	movs	r2, #12
 80030d8:	4013      	ands	r3, r2
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d01d      	beq.n	800311a <UART_SetConfig+0x14a>
 80030de:	d823      	bhi.n	8003128 <UART_SetConfig+0x158>
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d00c      	beq.n	80030fe <UART_SetConfig+0x12e>
 80030e4:	d820      	bhi.n	8003128 <UART_SetConfig+0x158>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <UART_SetConfig+0x120>
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00e      	beq.n	800310c <UART_SetConfig+0x13c>
 80030ee:	e01b      	b.n	8003128 <UART_SetConfig+0x158>
 80030f0:	231b      	movs	r3, #27
 80030f2:	2218      	movs	r2, #24
 80030f4:	189b      	adds	r3, r3, r2
 80030f6:	19db      	adds	r3, r3, r7
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e065      	b.n	80031ca <UART_SetConfig+0x1fa>
 80030fe:	231b      	movs	r3, #27
 8003100:	2218      	movs	r2, #24
 8003102:	189b      	adds	r3, r3, r2
 8003104:	19db      	adds	r3, r3, r7
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e05e      	b.n	80031ca <UART_SetConfig+0x1fa>
 800310c:	231b      	movs	r3, #27
 800310e:	2218      	movs	r2, #24
 8003110:	189b      	adds	r3, r3, r2
 8003112:	19db      	adds	r3, r3, r7
 8003114:	2204      	movs	r2, #4
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e057      	b.n	80031ca <UART_SetConfig+0x1fa>
 800311a:	231b      	movs	r3, #27
 800311c:	2218      	movs	r2, #24
 800311e:	189b      	adds	r3, r3, r2
 8003120:	19db      	adds	r3, r3, r7
 8003122:	2208      	movs	r2, #8
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e050      	b.n	80031ca <UART_SetConfig+0x1fa>
 8003128:	231b      	movs	r3, #27
 800312a:	2218      	movs	r2, #24
 800312c:	189b      	adds	r3, r3, r2
 800312e:	19db      	adds	r3, r3, r7
 8003130:	2210      	movs	r2, #16
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e049      	b.n	80031ca <UART_SetConfig+0x1fa>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <UART_SetConfig+0x354>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d13e      	bne.n	80031be <UART_SetConfig+0x1ee>
 8003140:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <UART_SetConfig+0x360>)
 8003142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003144:	23c0      	movs	r3, #192	; 0xc0
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4013      	ands	r3, r2
 800314a:	22c0      	movs	r2, #192	; 0xc0
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	4293      	cmp	r3, r2
 8003150:	d027      	beq.n	80031a2 <UART_SetConfig+0x1d2>
 8003152:	22c0      	movs	r2, #192	; 0xc0
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	4293      	cmp	r3, r2
 8003158:	d82a      	bhi.n	80031b0 <UART_SetConfig+0x1e0>
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	4293      	cmp	r3, r2
 8003160:	d011      	beq.n	8003186 <UART_SetConfig+0x1b6>
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	4293      	cmp	r3, r2
 8003168:	d822      	bhi.n	80031b0 <UART_SetConfig+0x1e0>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <UART_SetConfig+0x1a8>
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	00d2      	lsls	r2, r2, #3
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <UART_SetConfig+0x1c4>
 8003176:	e01b      	b.n	80031b0 <UART_SetConfig+0x1e0>
 8003178:	231b      	movs	r3, #27
 800317a:	2218      	movs	r2, #24
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e021      	b.n	80031ca <UART_SetConfig+0x1fa>
 8003186:	231b      	movs	r3, #27
 8003188:	2218      	movs	r2, #24
 800318a:	189b      	adds	r3, r3, r2
 800318c:	19db      	adds	r3, r3, r7
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e01a      	b.n	80031ca <UART_SetConfig+0x1fa>
 8003194:	231b      	movs	r3, #27
 8003196:	2218      	movs	r2, #24
 8003198:	189b      	adds	r3, r3, r2
 800319a:	19db      	adds	r3, r3, r7
 800319c:	2204      	movs	r2, #4
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e013      	b.n	80031ca <UART_SetConfig+0x1fa>
 80031a2:	231b      	movs	r3, #27
 80031a4:	2218      	movs	r2, #24
 80031a6:	189b      	adds	r3, r3, r2
 80031a8:	19db      	adds	r3, r3, r7
 80031aa:	2208      	movs	r2, #8
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e00c      	b.n	80031ca <UART_SetConfig+0x1fa>
 80031b0:	231b      	movs	r3, #27
 80031b2:	2218      	movs	r2, #24
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	19db      	adds	r3, r3, r7
 80031b8:	2210      	movs	r2, #16
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e005      	b.n	80031ca <UART_SetConfig+0x1fa>
 80031be:	231b      	movs	r3, #27
 80031c0:	2218      	movs	r2, #24
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	2210      	movs	r2, #16
 80031c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a55      	ldr	r2, [pc, #340]	; (8003324 <UART_SetConfig+0x354>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d000      	beq.n	80031d6 <UART_SetConfig+0x206>
 80031d4:	e084      	b.n	80032e0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031d6:	231b      	movs	r3, #27
 80031d8:	2218      	movs	r2, #24
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	19db      	adds	r3, r3, r7
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d01d      	beq.n	8003220 <UART_SetConfig+0x250>
 80031e4:	dc20      	bgt.n	8003228 <UART_SetConfig+0x258>
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d015      	beq.n	8003216 <UART_SetConfig+0x246>
 80031ea:	dc1d      	bgt.n	8003228 <UART_SetConfig+0x258>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <UART_SetConfig+0x226>
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d005      	beq.n	8003200 <UART_SetConfig+0x230>
 80031f4:	e018      	b.n	8003228 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f6:	f7ff f931 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80031fa:	0003      	movs	r3, r0
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031fe:	e01c      	b.n	800323a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003200:	4b4b      	ldr	r3, [pc, #300]	; (8003330 <UART_SetConfig+0x360>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	4013      	ands	r3, r2
 8003208:	d002      	beq.n	8003210 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <UART_SetConfig+0x368>)
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800320e:	e014      	b.n	800323a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <UART_SetConfig+0x36c>)
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003214:	e011      	b.n	800323a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff f871 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 800321a:	0003      	movs	r3, r0
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800321e:	e00c      	b.n	800323a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003226:	e008      	b.n	800323a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800322c:	231a      	movs	r3, #26
 800322e:	2218      	movs	r2, #24
 8003230:	189b      	adds	r3, r3, r2
 8003232:	19db      	adds	r3, r3, r7
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
        break;
 8003238:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d100      	bne.n	8003242 <UART_SetConfig+0x272>
 8003240:	e132      	b.n	80034a8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	0013      	movs	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	189b      	adds	r3, r3, r2
 800324c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324e:	429a      	cmp	r2, r3
 8003250:	d305      	bcc.n	800325e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325a:	429a      	cmp	r2, r3
 800325c:	d906      	bls.n	800326c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800325e:	231a      	movs	r3, #26
 8003260:	2218      	movs	r2, #24
 8003262:	189b      	adds	r3, r3, r2
 8003264:	19db      	adds	r3, r3, r7
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e11d      	b.n	80034a8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	000b      	movs	r3, r1
 800327a:	0e1b      	lsrs	r3, r3, #24
 800327c:	0010      	movs	r0, r2
 800327e:	0205      	lsls	r5, r0, #8
 8003280:	431d      	orrs	r5, r3
 8003282:	000b      	movs	r3, r1
 8003284:	021c      	lsls	r4, r3, #8
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	1900      	adds	r0, r0, r4
 8003298:	4169      	adcs	r1, r5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	2300      	movs	r3, #0
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f7fc ffc4 	bl	8000234 <__aeabi_uldivmod>
 80032ac:	0002      	movs	r2, r0
 80032ae:	000b      	movs	r3, r1
 80032b0:	0013      	movs	r3, r2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b6:	23c0      	movs	r3, #192	; 0xc0
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d309      	bcc.n	80032d2 <UART_SetConfig+0x302>
 80032be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	035b      	lsls	r3, r3, #13
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d204      	bcs.n	80032d2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	e0ea      	b.n	80034a8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80032d2:	231a      	movs	r3, #26
 80032d4:	2218      	movs	r2, #24
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	19db      	adds	r3, r3, r7
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e0e3      	b.n	80034a8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d000      	beq.n	80032ee <UART_SetConfig+0x31e>
 80032ec:	e085      	b.n	80033fa <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80032ee:	231b      	movs	r3, #27
 80032f0:	2218      	movs	r2, #24
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	19db      	adds	r3, r3, r7
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d837      	bhi.n	800336c <UART_SetConfig+0x39c>
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <UART_SetConfig+0x370>)
 8003300:	18d3      	adds	r3, r2, r3
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003306:	f7ff f8a9 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800330a:	0003      	movs	r3, r0
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800330e:	e036      	b.n	800337e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003310:	f7ff f8ba 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003314:	0003      	movs	r3, r0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003318:	e031      	b.n	800337e <UART_SetConfig+0x3ae>
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	efff69f3 	.word	0xefff69f3
 8003320:	ffffcfff 	.word	0xffffcfff
 8003324:	40004800 	.word	0x40004800
 8003328:	fffff4ff 	.word	0xfffff4ff
 800332c:	40013800 	.word	0x40013800
 8003330:	40021000 	.word	0x40021000
 8003334:	40004400 	.word	0x40004400
 8003338:	003d0900 	.word	0x003d0900
 800333c:	00f42400 	.word	0x00f42400
 8003340:	0800566c 	.word	0x0800566c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003344:	4b60      	ldr	r3, [pc, #384]	; (80034c8 <UART_SetConfig+0x4f8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2210      	movs	r2, #16
 800334a:	4013      	ands	r3, r2
 800334c:	d002      	beq.n	8003354 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800334e:	4b5f      	ldr	r3, [pc, #380]	; (80034cc <UART_SetConfig+0x4fc>)
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003352:	e014      	b.n	800337e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003354:	4b5e      	ldr	r3, [pc, #376]	; (80034d0 <UART_SetConfig+0x500>)
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003358:	e011      	b.n	800337e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7fe ffcf 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 800335e:	0003      	movs	r3, r0
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003362:	e00c      	b.n	800337e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800336a:	e008      	b.n	800337e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003370:	231a      	movs	r3, #26
 8003372:	2218      	movs	r2, #24
 8003374:	189b      	adds	r3, r3, r2
 8003376:	19db      	adds	r3, r3, r7
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
        break;
 800337c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d100      	bne.n	8003386 <UART_SetConfig+0x3b6>
 8003384:	e090      	b.n	80034a8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	005a      	lsls	r2, r3, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	18d2      	adds	r2, r2, r3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0019      	movs	r1, r3
 8003398:	0010      	movs	r0, r2
 800339a:	f7fc febf 	bl	800011c <__udivsi3>
 800339e:	0003      	movs	r3, r0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	2b0f      	cmp	r3, #15
 80033a6:	d921      	bls.n	80033ec <UART_SetConfig+0x41c>
 80033a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d21c      	bcs.n	80033ec <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	200e      	movs	r0, #14
 80033b8:	2418      	movs	r4, #24
 80033ba:	1903      	adds	r3, r0, r4
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	210f      	movs	r1, #15
 80033c0:	438a      	bics	r2, r1
 80033c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2207      	movs	r2, #7
 80033cc:	4013      	ands	r3, r2
 80033ce:	b299      	uxth	r1, r3
 80033d0:	1903      	adds	r3, r0, r4
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	1902      	adds	r2, r0, r4
 80033d6:	19d2      	adds	r2, r2, r7
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1902      	adds	r2, r0, r4
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	8812      	ldrh	r2, [r2, #0]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e05d      	b.n	80034a8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80033ec:	231a      	movs	r3, #26
 80033ee:	2218      	movs	r2, #24
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e056      	b.n	80034a8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033fa:	231b      	movs	r3, #27
 80033fc:	2218      	movs	r2, #24
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	19db      	adds	r3, r3, r7
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d822      	bhi.n	800344e <UART_SetConfig+0x47e>
 8003408:	009a      	lsls	r2, r3, #2
 800340a:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <UART_SetConfig+0x504>)
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003412:	f7ff f823 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003416:	0003      	movs	r3, r0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800341a:	e021      	b.n	8003460 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7ff f834 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003420:	0003      	movs	r3, r0
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003424:	e01c      	b.n	8003460 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <UART_SetConfig+0x4f8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2210      	movs	r2, #16
 800342c:	4013      	ands	r3, r2
 800342e:	d002      	beq.n	8003436 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <UART_SetConfig+0x4fc>)
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003434:	e014      	b.n	8003460 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <UART_SetConfig+0x500>)
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800343a:	e011      	b.n	8003460 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343c:	f7fe ff5e 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8003440:	0003      	movs	r3, r0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003444:	e00c      	b.n	8003460 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800344c:	e008      	b.n	8003460 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003452:	231a      	movs	r3, #26
 8003454:	2218      	movs	r2, #24
 8003456:	189b      	adds	r3, r3, r2
 8003458:	19db      	adds	r3, r3, r7
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
        break;
 800345e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	085a      	lsrs	r2, r3, #1
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346e:	18d2      	adds	r2, r2, r3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0019      	movs	r1, r3
 8003476:	0010      	movs	r0, r2
 8003478:	f7fc fe50 	bl	800011c <__udivsi3>
 800347c:	0003      	movs	r3, r0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d90a      	bls.n	800349c <UART_SetConfig+0x4cc>
 8003486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	025b      	lsls	r3, r3, #9
 800348c:	429a      	cmp	r2, r3
 800348e:	d205      	bcs.n	800349c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	b29a      	uxth	r2, r3
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e005      	b.n	80034a8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800349c:	231a      	movs	r3, #26
 800349e:	2218      	movs	r2, #24
 80034a0:	189b      	adds	r3, r3, r2
 80034a2:	19db      	adds	r3, r3, r7
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2200      	movs	r2, #0
 80034ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2200      	movs	r2, #0
 80034b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034b4:	231a      	movs	r3, #26
 80034b6:	2218      	movs	r2, #24
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	781b      	ldrb	r3, [r3, #0]
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b00e      	add	sp, #56	; 0x38
 80034c4:	bdb0      	pop	{r4, r5, r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	40021000 	.word	0x40021000
 80034cc:	003d0900 	.word	0x003d0900
 80034d0:	00f42400 	.word	0x00f42400
 80034d4:	08005690 	.word	0x08005690

080034d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2201      	movs	r2, #1
 80034e6:	4013      	ands	r3, r2
 80034e8:	d00b      	beq.n	8003502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a4a      	ldr	r2, [pc, #296]	; (800361c <UART_AdvFeatureConfig+0x144>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d00b      	beq.n	8003524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4a43      	ldr	r2, [pc, #268]	; (8003620 <UART_AdvFeatureConfig+0x148>)
 8003514:	4013      	ands	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2204      	movs	r2, #4
 800352a:	4013      	ands	r3, r2
 800352c:	d00b      	beq.n	8003546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <UART_AdvFeatureConfig+0x14c>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2208      	movs	r2, #8
 800354c:	4013      	ands	r3, r2
 800354e:	d00b      	beq.n	8003568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a34      	ldr	r2, [pc, #208]	; (8003628 <UART_AdvFeatureConfig+0x150>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	d00b      	beq.n	800358a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <UART_AdvFeatureConfig+0x154>)
 800357a:	4013      	ands	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2220      	movs	r2, #32
 8003590:	4013      	ands	r3, r2
 8003592:	d00b      	beq.n	80035ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	4a25      	ldr	r2, [pc, #148]	; (8003630 <UART_AdvFeatureConfig+0x158>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	4013      	ands	r3, r2
 80035b4:	d01d      	beq.n	80035f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <UART_AdvFeatureConfig+0x15c>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	035b      	lsls	r3, r3, #13
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d10b      	bne.n	80035f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <UART_AdvFeatureConfig+0x160>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	4013      	ands	r3, r2
 80035fa:	d00b      	beq.n	8003614 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a0e      	ldr	r2, [pc, #56]	; (800363c <UART_AdvFeatureConfig+0x164>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}
 800361c:	fffdffff 	.word	0xfffdffff
 8003620:	fffeffff 	.word	0xfffeffff
 8003624:	fffbffff 	.word	0xfffbffff
 8003628:	ffff7fff 	.word	0xffff7fff
 800362c:	ffffefff 	.word	0xffffefff
 8003630:	ffffdfff 	.word	0xffffdfff
 8003634:	ffefffff 	.word	0xffefffff
 8003638:	ff9fffff 	.word	0xff9fffff
 800363c:	fff7ffff 	.word	0xfff7ffff

08003640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b092      	sub	sp, #72	; 0x48
 8003644:	af02      	add	r7, sp, #8
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2284      	movs	r2, #132	; 0x84
 800364c:	2100      	movs	r1, #0
 800364e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003650:	f7fd fed2 	bl	80013f8 <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2208      	movs	r2, #8
 8003660:	4013      	ands	r3, r2
 8003662:	2b08      	cmp	r3, #8
 8003664:	d12c      	bne.n	80036c0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0391      	lsls	r1, r2, #14
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4a46      	ldr	r2, [pc, #280]	; (8003788 <UART_CheckIdleState+0x148>)
 8003670:	9200      	str	r2, [sp, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	f000 f88c 	bl	8003790 <UART_WaitOnFlagUntilTimeout>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d021      	beq.n	80036c0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
 8003686:	2301      	movs	r3, #1
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	438a      	bics	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2278      	movs	r2, #120	; 0x78
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e05f      	b.n	8003780 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d146      	bne.n	800375c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	03d1      	lsls	r1, r2, #15
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4a2c      	ldr	r2, [pc, #176]	; (8003788 <UART_CheckIdleState+0x148>)
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	f000 f858 	bl	8003790 <UART_WaitOnFlagUntilTimeout>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d03b      	beq.n	800375c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e4:	f3ef 8310 	mrs	r3, PRIMASK
 80036e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80036ea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
 80036ee:	2301      	movs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f383 8810 	msr	PRIMASK, r3
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4921      	ldr	r1, [pc, #132]	; (800378c <UART_CheckIdleState+0x14c>)
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f383 8810 	msr	PRIMASK, r3
}
 8003714:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003716:	f3ef 8310 	mrs	r3, PRIMASK
 800371a:	61bb      	str	r3, [r7, #24]
  return(result);
 800371c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	2301      	movs	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	438a      	bics	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	2120      	movs	r1, #32
 800374e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2278      	movs	r2, #120	; 0x78
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e011      	b.n	8003780 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	2120      	movs	r1, #32
 8003768:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2278      	movs	r2, #120	; 0x78
 800377a:	2100      	movs	r1, #0
 800377c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b010      	add	sp, #64	; 0x40
 8003786:	bd80      	pop	{r7, pc}
 8003788:	01ffffff 	.word	0x01ffffff
 800378c:	fffffedf 	.word	0xfffffedf

08003790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a0:	e04b      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	3301      	adds	r3, #1
 80037a6:	d048      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fd fe26 	bl	80013f8 <HAL_GetTick>
 80037ac:	0002      	movs	r2, r0
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <UART_WaitOnFlagUntilTimeout+0x2e>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04b      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	d035      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2208      	movs	r2, #8
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d111      	bne.n	8003800 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2208      	movs	r2, #8
 80037e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f83c 	bl	8003864 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2284      	movs	r2, #132	; 0x84
 80037f0:	2108      	movs	r1, #8
 80037f2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2278      	movs	r2, #120	; 0x78
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02c      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	401a      	ands	r2, r3
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	429a      	cmp	r2, r3
 8003812:	d112      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f81f 	bl	8003864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2284      	movs	r2, #132	; 0x84
 800382a:	2120      	movs	r1, #32
 800382c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2278      	movs	r2, #120	; 0x78
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	425a      	negs	r2, r3
 800384a:	4153      	adcs	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	001a      	movs	r2, r3
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d0a4      	beq.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	; 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	617b      	str	r3, [r7, #20]
  return(result);
 8003872:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4926      	ldr	r1, [pc, #152]	; (8003928 <UART_EndRxTransfer+0xc4>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	623b      	str	r3, [r7, #32]
  return(result);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d118      	bne.n	800390a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	2301      	movs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2110      	movs	r1, #16
 80038fa:	438a      	bics	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	2120      	movs	r1, #32
 8003910:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b00e      	add	sp, #56	; 0x38
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	fffffedf 	.word	0xfffffedf

0800392c <__errno>:
 800392c:	4b01      	ldr	r3, [pc, #4]	; (8003934 <__errno+0x8>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	4770      	bx	lr
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	20000014 	.word	0x20000014

08003938 <__libc_init_array>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	2600      	movs	r6, #0
 800393c:	4d0c      	ldr	r5, [pc, #48]	; (8003970 <__libc_init_array+0x38>)
 800393e:	4c0d      	ldr	r4, [pc, #52]	; (8003974 <__libc_init_array+0x3c>)
 8003940:	1b64      	subs	r4, r4, r5
 8003942:	10a4      	asrs	r4, r4, #2
 8003944:	42a6      	cmp	r6, r4
 8003946:	d109      	bne.n	800395c <__libc_init_array+0x24>
 8003948:	2600      	movs	r6, #0
 800394a:	f000 fc8b 	bl	8004264 <_init>
 800394e:	4d0a      	ldr	r5, [pc, #40]	; (8003978 <__libc_init_array+0x40>)
 8003950:	4c0a      	ldr	r4, [pc, #40]	; (800397c <__libc_init_array+0x44>)
 8003952:	1b64      	subs	r4, r4, r5
 8003954:	10a4      	asrs	r4, r4, #2
 8003956:	42a6      	cmp	r6, r4
 8003958:	d105      	bne.n	8003966 <__libc_init_array+0x2e>
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	00b3      	lsls	r3, r6, #2
 800395e:	58eb      	ldr	r3, [r5, r3]
 8003960:	4798      	blx	r3
 8003962:	3601      	adds	r6, #1
 8003964:	e7ee      	b.n	8003944 <__libc_init_array+0xc>
 8003966:	00b3      	lsls	r3, r6, #2
 8003968:	58eb      	ldr	r3, [r5, r3]
 800396a:	4798      	blx	r3
 800396c:	3601      	adds	r6, #1
 800396e:	e7f2      	b.n	8003956 <__libc_init_array+0x1e>
 8003970:	080056f0 	.word	0x080056f0
 8003974:	080056f0 	.word	0x080056f0
 8003978:	080056f0 	.word	0x080056f0
 800397c:	080056f4 	.word	0x080056f4

08003980 <memset>:
 8003980:	0003      	movs	r3, r0
 8003982:	1882      	adds	r2, r0, r2
 8003984:	4293      	cmp	r3, r2
 8003986:	d100      	bne.n	800398a <memset+0xa>
 8003988:	4770      	bx	lr
 800398a:	7019      	strb	r1, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	e7f9      	b.n	8003984 <memset+0x4>

08003990 <siprintf>:
 8003990:	b40e      	push	{r1, r2, r3}
 8003992:	b500      	push	{lr}
 8003994:	490b      	ldr	r1, [pc, #44]	; (80039c4 <siprintf+0x34>)
 8003996:	b09c      	sub	sp, #112	; 0x70
 8003998:	ab1d      	add	r3, sp, #116	; 0x74
 800399a:	9002      	str	r0, [sp, #8]
 800399c:	9006      	str	r0, [sp, #24]
 800399e:	9107      	str	r1, [sp, #28]
 80039a0:	9104      	str	r1, [sp, #16]
 80039a2:	4809      	ldr	r0, [pc, #36]	; (80039c8 <siprintf+0x38>)
 80039a4:	4909      	ldr	r1, [pc, #36]	; (80039cc <siprintf+0x3c>)
 80039a6:	cb04      	ldmia	r3!, {r2}
 80039a8:	9105      	str	r1, [sp, #20]
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	a902      	add	r1, sp, #8
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	f000 f870 	bl	8003a94 <_svfiprintf_r>
 80039b4:	2300      	movs	r3, #0
 80039b6:	9a02      	ldr	r2, [sp, #8]
 80039b8:	7013      	strb	r3, [r2, #0]
 80039ba:	b01c      	add	sp, #112	; 0x70
 80039bc:	bc08      	pop	{r3}
 80039be:	b003      	add	sp, #12
 80039c0:	4718      	bx	r3
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	7fffffff 	.word	0x7fffffff
 80039c8:	20000014 	.word	0x20000014
 80039cc:	ffff0208 	.word	0xffff0208

080039d0 <__ssputs_r>:
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	688e      	ldr	r6, [r1, #8]
 80039d4:	b085      	sub	sp, #20
 80039d6:	0007      	movs	r7, r0
 80039d8:	000c      	movs	r4, r1
 80039da:	9203      	str	r2, [sp, #12]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	429e      	cmp	r6, r3
 80039e0:	d83c      	bhi.n	8003a5c <__ssputs_r+0x8c>
 80039e2:	2390      	movs	r3, #144	; 0x90
 80039e4:	898a      	ldrh	r2, [r1, #12]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	421a      	tst	r2, r3
 80039ea:	d034      	beq.n	8003a56 <__ssputs_r+0x86>
 80039ec:	6909      	ldr	r1, [r1, #16]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	6960      	ldr	r0, [r4, #20]
 80039f2:	1a5b      	subs	r3, r3, r1
 80039f4:	9302      	str	r3, [sp, #8]
 80039f6:	2303      	movs	r3, #3
 80039f8:	4343      	muls	r3, r0
 80039fa:	0fdd      	lsrs	r5, r3, #31
 80039fc:	18ed      	adds	r5, r5, r3
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	9802      	ldr	r0, [sp, #8]
 8003a02:	3301      	adds	r3, #1
 8003a04:	181b      	adds	r3, r3, r0
 8003a06:	106d      	asrs	r5, r5, #1
 8003a08:	42ab      	cmp	r3, r5
 8003a0a:	d900      	bls.n	8003a0e <__ssputs_r+0x3e>
 8003a0c:	001d      	movs	r5, r3
 8003a0e:	0553      	lsls	r3, r2, #21
 8003a10:	d532      	bpl.n	8003a78 <__ssputs_r+0xa8>
 8003a12:	0029      	movs	r1, r5
 8003a14:	0038      	movs	r0, r7
 8003a16:	f000 fb53 	bl	80040c0 <_malloc_r>
 8003a1a:	1e06      	subs	r6, r0, #0
 8003a1c:	d109      	bne.n	8003a32 <__ssputs_r+0x62>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	2001      	movs	r0, #1
 8003a26:	89a2      	ldrh	r2, [r4, #12]
 8003a28:	4240      	negs	r0, r0
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	b005      	add	sp, #20
 8003a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a32:	9a02      	ldr	r2, [sp, #8]
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	f000 faba 	bl	8003fae <memcpy>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <__ssputs_r+0xc0>)
 8003a3e:	401a      	ands	r2, r3
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	4313      	orrs	r3, r2
 8003a44:	81a3      	strh	r3, [r4, #12]
 8003a46:	9b02      	ldr	r3, [sp, #8]
 8003a48:	6126      	str	r6, [r4, #16]
 8003a4a:	18f6      	adds	r6, r6, r3
 8003a4c:	6026      	str	r6, [r4, #0]
 8003a4e:	6165      	str	r5, [r4, #20]
 8003a50:	9e01      	ldr	r6, [sp, #4]
 8003a52:	1aed      	subs	r5, r5, r3
 8003a54:	60a5      	str	r5, [r4, #8]
 8003a56:	9b01      	ldr	r3, [sp, #4]
 8003a58:	429e      	cmp	r6, r3
 8003a5a:	d900      	bls.n	8003a5e <__ssputs_r+0x8e>
 8003a5c:	9e01      	ldr	r6, [sp, #4]
 8003a5e:	0032      	movs	r2, r6
 8003a60:	9903      	ldr	r1, [sp, #12]
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	f000 faac 	bl	8003fc0 <memmove>
 8003a68:	68a3      	ldr	r3, [r4, #8]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	1b9b      	subs	r3, r3, r6
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	199e      	adds	r6, r3, r6
 8003a74:	6026      	str	r6, [r4, #0]
 8003a76:	e7da      	b.n	8003a2e <__ssputs_r+0x5e>
 8003a78:	002a      	movs	r2, r5
 8003a7a:	0038      	movs	r0, r7
 8003a7c:	f000 fb96 	bl	80041ac <_realloc_r>
 8003a80:	1e06      	subs	r6, r0, #0
 8003a82:	d1e0      	bne.n	8003a46 <__ssputs_r+0x76>
 8003a84:	0038      	movs	r0, r7
 8003a86:	6921      	ldr	r1, [r4, #16]
 8003a88:	f000 faae 	bl	8003fe8 <_free_r>
 8003a8c:	e7c7      	b.n	8003a1e <__ssputs_r+0x4e>
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	fffffb7f 	.word	0xfffffb7f

08003a94 <_svfiprintf_r>:
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b0a1      	sub	sp, #132	; 0x84
 8003a98:	9003      	str	r0, [sp, #12]
 8003a9a:	001d      	movs	r5, r3
 8003a9c:	898b      	ldrh	r3, [r1, #12]
 8003a9e:	000f      	movs	r7, r1
 8003aa0:	0016      	movs	r6, r2
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	d511      	bpl.n	8003aca <_svfiprintf_r+0x36>
 8003aa6:	690b      	ldr	r3, [r1, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10e      	bne.n	8003aca <_svfiprintf_r+0x36>
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	f000 fb07 	bl	80040c0 <_malloc_r>
 8003ab2:	6038      	str	r0, [r7, #0]
 8003ab4:	6138      	str	r0, [r7, #16]
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d105      	bne.n	8003ac6 <_svfiprintf_r+0x32>
 8003aba:	230c      	movs	r3, #12
 8003abc:	9a03      	ldr	r2, [sp, #12]
 8003abe:	3801      	subs	r0, #1
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	b021      	add	sp, #132	; 0x84
 8003ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	ac08      	add	r4, sp, #32
 8003ace:	6163      	str	r3, [r4, #20]
 8003ad0:	3320      	adds	r3, #32
 8003ad2:	7663      	strb	r3, [r4, #25]
 8003ad4:	3310      	adds	r3, #16
 8003ad6:	76a3      	strb	r3, [r4, #26]
 8003ad8:	9507      	str	r5, [sp, #28]
 8003ada:	0035      	movs	r5, r6
 8003adc:	782b      	ldrb	r3, [r5, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <_svfiprintf_r+0x52>
 8003ae2:	2b25      	cmp	r3, #37	; 0x25
 8003ae4:	d147      	bne.n	8003b76 <_svfiprintf_r+0xe2>
 8003ae6:	1bab      	subs	r3, r5, r6
 8003ae8:	9305      	str	r3, [sp, #20]
 8003aea:	42b5      	cmp	r5, r6
 8003aec:	d00c      	beq.n	8003b08 <_svfiprintf_r+0x74>
 8003aee:	0032      	movs	r2, r6
 8003af0:	0039      	movs	r1, r7
 8003af2:	9803      	ldr	r0, [sp, #12]
 8003af4:	f7ff ff6c 	bl	80039d0 <__ssputs_r>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d100      	bne.n	8003afe <_svfiprintf_r+0x6a>
 8003afc:	e0ae      	b.n	8003c5c <_svfiprintf_r+0x1c8>
 8003afe:	6962      	ldr	r2, [r4, #20]
 8003b00:	9b05      	ldr	r3, [sp, #20]
 8003b02:	4694      	mov	ip, r2
 8003b04:	4463      	add	r3, ip
 8003b06:	6163      	str	r3, [r4, #20]
 8003b08:	782b      	ldrb	r3, [r5, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d100      	bne.n	8003b10 <_svfiprintf_r+0x7c>
 8003b0e:	e0a5      	b.n	8003c5c <_svfiprintf_r+0x1c8>
 8003b10:	2201      	movs	r2, #1
 8003b12:	2300      	movs	r3, #0
 8003b14:	4252      	negs	r2, r2
 8003b16:	6062      	str	r2, [r4, #4]
 8003b18:	a904      	add	r1, sp, #16
 8003b1a:	3254      	adds	r2, #84	; 0x54
 8003b1c:	1852      	adds	r2, r2, r1
 8003b1e:	1c6e      	adds	r6, r5, #1
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	60e3      	str	r3, [r4, #12]
 8003b24:	60a3      	str	r3, [r4, #8]
 8003b26:	7013      	strb	r3, [r2, #0]
 8003b28:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	7831      	ldrb	r1, [r6, #0]
 8003b2e:	4854      	ldr	r0, [pc, #336]	; (8003c80 <_svfiprintf_r+0x1ec>)
 8003b30:	f000 fa32 	bl	8003f98 <memchr>
 8003b34:	1c75      	adds	r5, r6, #1
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d11f      	bne.n	8003b7a <_svfiprintf_r+0xe6>
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	06d3      	lsls	r3, r2, #27
 8003b3e:	d504      	bpl.n	8003b4a <_svfiprintf_r+0xb6>
 8003b40:	2353      	movs	r3, #83	; 0x53
 8003b42:	a904      	add	r1, sp, #16
 8003b44:	185b      	adds	r3, r3, r1
 8003b46:	2120      	movs	r1, #32
 8003b48:	7019      	strb	r1, [r3, #0]
 8003b4a:	0713      	lsls	r3, r2, #28
 8003b4c:	d504      	bpl.n	8003b58 <_svfiprintf_r+0xc4>
 8003b4e:	2353      	movs	r3, #83	; 0x53
 8003b50:	a904      	add	r1, sp, #16
 8003b52:	185b      	adds	r3, r3, r1
 8003b54:	212b      	movs	r1, #43	; 0x2b
 8003b56:	7019      	strb	r1, [r3, #0]
 8003b58:	7833      	ldrb	r3, [r6, #0]
 8003b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5c:	d016      	beq.n	8003b8c <_svfiprintf_r+0xf8>
 8003b5e:	0035      	movs	r5, r6
 8003b60:	2100      	movs	r1, #0
 8003b62:	200a      	movs	r0, #10
 8003b64:	68e3      	ldr	r3, [r4, #12]
 8003b66:	782a      	ldrb	r2, [r5, #0]
 8003b68:	1c6e      	adds	r6, r5, #1
 8003b6a:	3a30      	subs	r2, #48	; 0x30
 8003b6c:	2a09      	cmp	r2, #9
 8003b6e:	d94e      	bls.n	8003c0e <_svfiprintf_r+0x17a>
 8003b70:	2900      	cmp	r1, #0
 8003b72:	d111      	bne.n	8003b98 <_svfiprintf_r+0x104>
 8003b74:	e017      	b.n	8003ba6 <_svfiprintf_r+0x112>
 8003b76:	3501      	adds	r5, #1
 8003b78:	e7b0      	b.n	8003adc <_svfiprintf_r+0x48>
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <_svfiprintf_r+0x1ec>)
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	1ac0      	subs	r0, r0, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	4083      	lsls	r3, r0
 8003b84:	4313      	orrs	r3, r2
 8003b86:	002e      	movs	r6, r5
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	e7ce      	b.n	8003b2a <_svfiprintf_r+0x96>
 8003b8c:	9b07      	ldr	r3, [sp, #28]
 8003b8e:	1d19      	adds	r1, r3, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	9107      	str	r1, [sp, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db01      	blt.n	8003b9c <_svfiprintf_r+0x108>
 8003b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b9a:	e004      	b.n	8003ba6 <_svfiprintf_r+0x112>
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	60e3      	str	r3, [r4, #12]
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	782b      	ldrb	r3, [r5, #0]
 8003ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8003baa:	d10a      	bne.n	8003bc2 <_svfiprintf_r+0x12e>
 8003bac:	786b      	ldrb	r3, [r5, #1]
 8003bae:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb0:	d135      	bne.n	8003c1e <_svfiprintf_r+0x18a>
 8003bb2:	9b07      	ldr	r3, [sp, #28]
 8003bb4:	3502      	adds	r5, #2
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	9207      	str	r2, [sp, #28]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	db2b      	blt.n	8003c18 <_svfiprintf_r+0x184>
 8003bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc2:	4e30      	ldr	r6, [pc, #192]	; (8003c84 <_svfiprintf_r+0x1f0>)
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	0030      	movs	r0, r6
 8003bc8:	7829      	ldrb	r1, [r5, #0]
 8003bca:	f000 f9e5 	bl	8003f98 <memchr>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d006      	beq.n	8003be0 <_svfiprintf_r+0x14c>
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	1b80      	subs	r0, r0, r6
 8003bd6:	4083      	lsls	r3, r0
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	3501      	adds	r5, #1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	7829      	ldrb	r1, [r5, #0]
 8003be2:	2206      	movs	r2, #6
 8003be4:	4828      	ldr	r0, [pc, #160]	; (8003c88 <_svfiprintf_r+0x1f4>)
 8003be6:	1c6e      	adds	r6, r5, #1
 8003be8:	7621      	strb	r1, [r4, #24]
 8003bea:	f000 f9d5 	bl	8003f98 <memchr>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d03c      	beq.n	8003c6c <_svfiprintf_r+0x1d8>
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <_svfiprintf_r+0x1f8>)
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d125      	bne.n	8003c44 <_svfiprintf_r+0x1b0>
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	9b07      	ldr	r3, [sp, #28]
 8003bfc:	3307      	adds	r3, #7
 8003bfe:	4393      	bics	r3, r2
 8003c00:	3308      	adds	r3, #8
 8003c02:	9307      	str	r3, [sp, #28]
 8003c04:	6963      	ldr	r3, [r4, #20]
 8003c06:	9a04      	ldr	r2, [sp, #16]
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	6163      	str	r3, [r4, #20]
 8003c0c:	e765      	b.n	8003ada <_svfiprintf_r+0x46>
 8003c0e:	4343      	muls	r3, r0
 8003c10:	0035      	movs	r5, r6
 8003c12:	2101      	movs	r1, #1
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	e7a6      	b.n	8003b66 <_svfiprintf_r+0xd2>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	425b      	negs	r3, r3
 8003c1c:	e7d0      	b.n	8003bc0 <_svfiprintf_r+0x12c>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	200a      	movs	r0, #10
 8003c22:	001a      	movs	r2, r3
 8003c24:	3501      	adds	r5, #1
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	7829      	ldrb	r1, [r5, #0]
 8003c2a:	1c6e      	adds	r6, r5, #1
 8003c2c:	3930      	subs	r1, #48	; 0x30
 8003c2e:	2909      	cmp	r1, #9
 8003c30:	d903      	bls.n	8003c3a <_svfiprintf_r+0x1a6>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0c5      	beq.n	8003bc2 <_svfiprintf_r+0x12e>
 8003c36:	9209      	str	r2, [sp, #36]	; 0x24
 8003c38:	e7c3      	b.n	8003bc2 <_svfiprintf_r+0x12e>
 8003c3a:	4342      	muls	r2, r0
 8003c3c:	0035      	movs	r5, r6
 8003c3e:	2301      	movs	r3, #1
 8003c40:	1852      	adds	r2, r2, r1
 8003c42:	e7f1      	b.n	8003c28 <_svfiprintf_r+0x194>
 8003c44:	ab07      	add	r3, sp, #28
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	003a      	movs	r2, r7
 8003c4a:	0021      	movs	r1, r4
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <_svfiprintf_r+0x1fc>)
 8003c4e:	9803      	ldr	r0, [sp, #12]
 8003c50:	e000      	b.n	8003c54 <_svfiprintf_r+0x1c0>
 8003c52:	bf00      	nop
 8003c54:	9004      	str	r0, [sp, #16]
 8003c56:	9b04      	ldr	r3, [sp, #16]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	d1d3      	bne.n	8003c04 <_svfiprintf_r+0x170>
 8003c5c:	89bb      	ldrh	r3, [r7, #12]
 8003c5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003c60:	065b      	lsls	r3, r3, #25
 8003c62:	d400      	bmi.n	8003c66 <_svfiprintf_r+0x1d2>
 8003c64:	e72d      	b.n	8003ac2 <_svfiprintf_r+0x2e>
 8003c66:	2001      	movs	r0, #1
 8003c68:	4240      	negs	r0, r0
 8003c6a:	e72a      	b.n	8003ac2 <_svfiprintf_r+0x2e>
 8003c6c:	ab07      	add	r3, sp, #28
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	003a      	movs	r2, r7
 8003c72:	0021      	movs	r1, r4
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <_svfiprintf_r+0x1fc>)
 8003c76:	9803      	ldr	r0, [sp, #12]
 8003c78:	f000 f87c 	bl	8003d74 <_printf_i>
 8003c7c:	e7ea      	b.n	8003c54 <_svfiprintf_r+0x1c0>
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	080056b4 	.word	0x080056b4
 8003c84:	080056ba 	.word	0x080056ba
 8003c88:	080056be 	.word	0x080056be
 8003c8c:	00000000 	.word	0x00000000
 8003c90:	080039d1 	.word	0x080039d1

08003c94 <_printf_common>:
 8003c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c96:	0015      	movs	r5, r2
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	688a      	ldr	r2, [r1, #8]
 8003c9c:	690b      	ldr	r3, [r1, #16]
 8003c9e:	000c      	movs	r4, r1
 8003ca0:	9000      	str	r0, [sp, #0]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	da00      	bge.n	8003ca8 <_printf_common+0x14>
 8003ca6:	0013      	movs	r3, r2
 8003ca8:	0022      	movs	r2, r4
 8003caa:	602b      	str	r3, [r5, #0]
 8003cac:	3243      	adds	r2, #67	; 0x43
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d001      	beq.n	8003cb8 <_printf_common+0x24>
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	069b      	lsls	r3, r3, #26
 8003cbc:	d502      	bpl.n	8003cc4 <_printf_common+0x30>
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	2306      	movs	r3, #6
 8003cc8:	0017      	movs	r7, r2
 8003cca:	401f      	ands	r7, r3
 8003ccc:	421a      	tst	r2, r3
 8003cce:	d027      	beq.n	8003d20 <_printf_common+0x8c>
 8003cd0:	0023      	movs	r3, r4
 8003cd2:	3343      	adds	r3, #67	; 0x43
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	4193      	sbcs	r3, r2
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	0692      	lsls	r2, r2, #26
 8003cde:	d430      	bmi.n	8003d42 <_printf_common+0xae>
 8003ce0:	0022      	movs	r2, r4
 8003ce2:	9901      	ldr	r1, [sp, #4]
 8003ce4:	9800      	ldr	r0, [sp, #0]
 8003ce6:	9e08      	ldr	r6, [sp, #32]
 8003ce8:	3243      	adds	r2, #67	; 0x43
 8003cea:	47b0      	blx	r6
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d025      	beq.n	8003d3c <_printf_common+0xa8>
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	682a      	ldr	r2, [r5, #0]
 8003cf6:	68e1      	ldr	r1, [r4, #12]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	4003      	ands	r3, r0
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d103      	bne.n	8003d08 <_printf_common+0x74>
 8003d00:	1a8d      	subs	r5, r1, r2
 8003d02:	43eb      	mvns	r3, r5
 8003d04:	17db      	asrs	r3, r3, #31
 8003d06:	401d      	ands	r5, r3
 8003d08:	68a3      	ldr	r3, [r4, #8]
 8003d0a:	6922      	ldr	r2, [r4, #16]
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	dd01      	ble.n	8003d14 <_printf_common+0x80>
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	18ed      	adds	r5, r5, r3
 8003d14:	2700      	movs	r7, #0
 8003d16:	42bd      	cmp	r5, r7
 8003d18:	d120      	bne.n	8003d5c <_printf_common+0xc8>
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e010      	b.n	8003d40 <_printf_common+0xac>
 8003d1e:	3701      	adds	r7, #1
 8003d20:	68e3      	ldr	r3, [r4, #12]
 8003d22:	682a      	ldr	r2, [r5, #0]
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	42bb      	cmp	r3, r7
 8003d28:	ddd2      	ble.n	8003cd0 <_printf_common+0x3c>
 8003d2a:	0022      	movs	r2, r4
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	9901      	ldr	r1, [sp, #4]
 8003d30:	9800      	ldr	r0, [sp, #0]
 8003d32:	9e08      	ldr	r6, [sp, #32]
 8003d34:	3219      	adds	r2, #25
 8003d36:	47b0      	blx	r6
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d1f0      	bne.n	8003d1e <_printf_common+0x8a>
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	4240      	negs	r0, r0
 8003d40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d42:	2030      	movs	r0, #48	; 0x30
 8003d44:	18e1      	adds	r1, r4, r3
 8003d46:	3143      	adds	r1, #67	; 0x43
 8003d48:	7008      	strb	r0, [r1, #0]
 8003d4a:	0021      	movs	r1, r4
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	3145      	adds	r1, #69	; 0x45
 8003d50:	7809      	ldrb	r1, [r1, #0]
 8003d52:	18a2      	adds	r2, r4, r2
 8003d54:	3243      	adds	r2, #67	; 0x43
 8003d56:	3302      	adds	r3, #2
 8003d58:	7011      	strb	r1, [r2, #0]
 8003d5a:	e7c1      	b.n	8003ce0 <_printf_common+0x4c>
 8003d5c:	0022      	movs	r2, r4
 8003d5e:	2301      	movs	r3, #1
 8003d60:	9901      	ldr	r1, [sp, #4]
 8003d62:	9800      	ldr	r0, [sp, #0]
 8003d64:	9e08      	ldr	r6, [sp, #32]
 8003d66:	321a      	adds	r2, #26
 8003d68:	47b0      	blx	r6
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	d0e6      	beq.n	8003d3c <_printf_common+0xa8>
 8003d6e:	3701      	adds	r7, #1
 8003d70:	e7d1      	b.n	8003d16 <_printf_common+0x82>
	...

08003d74 <_printf_i>:
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b08b      	sub	sp, #44	; 0x2c
 8003d78:	9206      	str	r2, [sp, #24]
 8003d7a:	000a      	movs	r2, r1
 8003d7c:	3243      	adds	r2, #67	; 0x43
 8003d7e:	9307      	str	r3, [sp, #28]
 8003d80:	9005      	str	r0, [sp, #20]
 8003d82:	9204      	str	r2, [sp, #16]
 8003d84:	7e0a      	ldrb	r2, [r1, #24]
 8003d86:	000c      	movs	r4, r1
 8003d88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d8a:	2a78      	cmp	r2, #120	; 0x78
 8003d8c:	d807      	bhi.n	8003d9e <_printf_i+0x2a>
 8003d8e:	2a62      	cmp	r2, #98	; 0x62
 8003d90:	d809      	bhi.n	8003da6 <_printf_i+0x32>
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	d100      	bne.n	8003d98 <_printf_i+0x24>
 8003d96:	e0c1      	b.n	8003f1c <_printf_i+0x1a8>
 8003d98:	2a58      	cmp	r2, #88	; 0x58
 8003d9a:	d100      	bne.n	8003d9e <_printf_i+0x2a>
 8003d9c:	e08c      	b.n	8003eb8 <_printf_i+0x144>
 8003d9e:	0026      	movs	r6, r4
 8003da0:	3642      	adds	r6, #66	; 0x42
 8003da2:	7032      	strb	r2, [r6, #0]
 8003da4:	e022      	b.n	8003dec <_printf_i+0x78>
 8003da6:	0010      	movs	r0, r2
 8003da8:	3863      	subs	r0, #99	; 0x63
 8003daa:	2815      	cmp	r0, #21
 8003dac:	d8f7      	bhi.n	8003d9e <_printf_i+0x2a>
 8003dae:	f7fc f9ab 	bl	8000108 <__gnu_thumb1_case_shi>
 8003db2:	0016      	.short	0x0016
 8003db4:	fff6001f 	.word	0xfff6001f
 8003db8:	fff6fff6 	.word	0xfff6fff6
 8003dbc:	001ffff6 	.word	0x001ffff6
 8003dc0:	fff6fff6 	.word	0xfff6fff6
 8003dc4:	fff6fff6 	.word	0xfff6fff6
 8003dc8:	003600a8 	.word	0x003600a8
 8003dcc:	fff6009a 	.word	0xfff6009a
 8003dd0:	00b9fff6 	.word	0x00b9fff6
 8003dd4:	0036fff6 	.word	0x0036fff6
 8003dd8:	fff6fff6 	.word	0xfff6fff6
 8003ddc:	009e      	.short	0x009e
 8003dde:	0026      	movs	r6, r4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	3642      	adds	r6, #66	; 0x42
 8003de4:	1d11      	adds	r1, r2, #4
 8003de6:	6019      	str	r1, [r3, #0]
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	7033      	strb	r3, [r6, #0]
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0a7      	b.n	8003f40 <_printf_i+0x1cc>
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	1d0a      	adds	r2, r1, #4
 8003df6:	0605      	lsls	r5, r0, #24
 8003df8:	d50b      	bpl.n	8003e12 <_printf_i+0x9e>
 8003dfa:	680d      	ldr	r5, [r1, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	da03      	bge.n	8003e0a <_printf_i+0x96>
 8003e02:	232d      	movs	r3, #45	; 0x2d
 8003e04:	9a04      	ldr	r2, [sp, #16]
 8003e06:	426d      	negs	r5, r5
 8003e08:	7013      	strb	r3, [r2, #0]
 8003e0a:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <_printf_i+0x21c>)
 8003e0c:	270a      	movs	r7, #10
 8003e0e:	9303      	str	r3, [sp, #12]
 8003e10:	e01b      	b.n	8003e4a <_printf_i+0xd6>
 8003e12:	680d      	ldr	r5, [r1, #0]
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	0641      	lsls	r1, r0, #25
 8003e18:	d5f1      	bpl.n	8003dfe <_printf_i+0x8a>
 8003e1a:	b22d      	sxth	r5, r5
 8003e1c:	e7ef      	b.n	8003dfe <_printf_i+0x8a>
 8003e1e:	680d      	ldr	r5, [r1, #0]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	1d08      	adds	r0, r1, #4
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	062e      	lsls	r6, r5, #24
 8003e28:	d501      	bpl.n	8003e2e <_printf_i+0xba>
 8003e2a:	680d      	ldr	r5, [r1, #0]
 8003e2c:	e003      	b.n	8003e36 <_printf_i+0xc2>
 8003e2e:	066d      	lsls	r5, r5, #25
 8003e30:	d5fb      	bpl.n	8003e2a <_printf_i+0xb6>
 8003e32:	680d      	ldr	r5, [r1, #0]
 8003e34:	b2ad      	uxth	r5, r5
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <_printf_i+0x21c>)
 8003e38:	2708      	movs	r7, #8
 8003e3a:	9303      	str	r3, [sp, #12]
 8003e3c:	2a6f      	cmp	r2, #111	; 0x6f
 8003e3e:	d000      	beq.n	8003e42 <_printf_i+0xce>
 8003e40:	3702      	adds	r7, #2
 8003e42:	0023      	movs	r3, r4
 8003e44:	2200      	movs	r2, #0
 8003e46:	3343      	adds	r3, #67	; 0x43
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	6863      	ldr	r3, [r4, #4]
 8003e4c:	60a3      	str	r3, [r4, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	db03      	blt.n	8003e5a <_printf_i+0xe6>
 8003e52:	2204      	movs	r2, #4
 8003e54:	6821      	ldr	r1, [r4, #0]
 8003e56:	4391      	bics	r1, r2
 8003e58:	6021      	str	r1, [r4, #0]
 8003e5a:	2d00      	cmp	r5, #0
 8003e5c:	d102      	bne.n	8003e64 <_printf_i+0xf0>
 8003e5e:	9e04      	ldr	r6, [sp, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <_printf_i+0x10a>
 8003e64:	9e04      	ldr	r6, [sp, #16]
 8003e66:	0028      	movs	r0, r5
 8003e68:	0039      	movs	r1, r7
 8003e6a:	f7fc f9dd 	bl	8000228 <__aeabi_uidivmod>
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	3e01      	subs	r6, #1
 8003e72:	5c5b      	ldrb	r3, [r3, r1]
 8003e74:	7033      	strb	r3, [r6, #0]
 8003e76:	002b      	movs	r3, r5
 8003e78:	0005      	movs	r5, r0
 8003e7a:	429f      	cmp	r7, r3
 8003e7c:	d9f3      	bls.n	8003e66 <_printf_i+0xf2>
 8003e7e:	2f08      	cmp	r7, #8
 8003e80:	d109      	bne.n	8003e96 <_printf_i+0x122>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	07db      	lsls	r3, r3, #31
 8003e86:	d506      	bpl.n	8003e96 <_printf_i+0x122>
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	6922      	ldr	r2, [r4, #16]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	dc02      	bgt.n	8003e96 <_printf_i+0x122>
 8003e90:	2330      	movs	r3, #48	; 0x30
 8003e92:	3e01      	subs	r6, #1
 8003e94:	7033      	strb	r3, [r6, #0]
 8003e96:	9b04      	ldr	r3, [sp, #16]
 8003e98:	1b9b      	subs	r3, r3, r6
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	9b07      	ldr	r3, [sp, #28]
 8003e9e:	0021      	movs	r1, r4
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	9805      	ldr	r0, [sp, #20]
 8003ea4:	9b06      	ldr	r3, [sp, #24]
 8003ea6:	aa09      	add	r2, sp, #36	; 0x24
 8003ea8:	f7ff fef4 	bl	8003c94 <_printf_common>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d14c      	bne.n	8003f4a <_printf_i+0x1d6>
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	4240      	negs	r0, r0
 8003eb4:	b00b      	add	sp, #44	; 0x2c
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb8:	3145      	adds	r1, #69	; 0x45
 8003eba:	700a      	strb	r2, [r1, #0]
 8003ebc:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <_printf_i+0x21c>)
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	6821      	ldr	r1, [r4, #0]
 8003ec4:	ca20      	ldmia	r2!, {r5}
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	0608      	lsls	r0, r1, #24
 8003eca:	d516      	bpl.n	8003efa <_printf_i+0x186>
 8003ecc:	07cb      	lsls	r3, r1, #31
 8003ece:	d502      	bpl.n	8003ed6 <_printf_i+0x162>
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	4319      	orrs	r1, r3
 8003ed4:	6021      	str	r1, [r4, #0]
 8003ed6:	2710      	movs	r7, #16
 8003ed8:	2d00      	cmp	r5, #0
 8003eda:	d1b2      	bne.n	8003e42 <_printf_i+0xce>
 8003edc:	2320      	movs	r3, #32
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	439a      	bics	r2, r3
 8003ee2:	6022      	str	r2, [r4, #0]
 8003ee4:	e7ad      	b.n	8003e42 <_printf_i+0xce>
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	6809      	ldr	r1, [r1, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	6022      	str	r2, [r4, #0]
 8003eee:	0022      	movs	r2, r4
 8003ef0:	2178      	movs	r1, #120	; 0x78
 8003ef2:	3245      	adds	r2, #69	; 0x45
 8003ef4:	7011      	strb	r1, [r2, #0]
 8003ef6:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <_printf_i+0x220>)
 8003ef8:	e7e1      	b.n	8003ebe <_printf_i+0x14a>
 8003efa:	0648      	lsls	r0, r1, #25
 8003efc:	d5e6      	bpl.n	8003ecc <_printf_i+0x158>
 8003efe:	b2ad      	uxth	r5, r5
 8003f00:	e7e4      	b.n	8003ecc <_printf_i+0x158>
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	680d      	ldr	r5, [r1, #0]
 8003f06:	1d10      	adds	r0, r2, #4
 8003f08:	6949      	ldr	r1, [r1, #20]
 8003f0a:	6018      	str	r0, [r3, #0]
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	062e      	lsls	r6, r5, #24
 8003f10:	d501      	bpl.n	8003f16 <_printf_i+0x1a2>
 8003f12:	6019      	str	r1, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <_printf_i+0x1a8>
 8003f16:	066d      	lsls	r5, r5, #25
 8003f18:	d5fb      	bpl.n	8003f12 <_printf_i+0x19e>
 8003f1a:	8019      	strh	r1, [r3, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9e04      	ldr	r6, [sp, #16]
 8003f20:	6123      	str	r3, [r4, #16]
 8003f22:	e7bb      	b.n	8003e9c <_printf_i+0x128>
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	1d11      	adds	r1, r2, #4
 8003f28:	6019      	str	r1, [r3, #0]
 8003f2a:	6816      	ldr	r6, [r2, #0]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	0030      	movs	r0, r6
 8003f30:	6862      	ldr	r2, [r4, #4]
 8003f32:	f000 f831 	bl	8003f98 <memchr>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d001      	beq.n	8003f3e <_printf_i+0x1ca>
 8003f3a:	1b80      	subs	r0, r0, r6
 8003f3c:	6060      	str	r0, [r4, #4]
 8003f3e:	6863      	ldr	r3, [r4, #4]
 8003f40:	6123      	str	r3, [r4, #16]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9a04      	ldr	r2, [sp, #16]
 8003f46:	7013      	strb	r3, [r2, #0]
 8003f48:	e7a8      	b.n	8003e9c <_printf_i+0x128>
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	0032      	movs	r2, r6
 8003f4e:	9906      	ldr	r1, [sp, #24]
 8003f50:	9805      	ldr	r0, [sp, #20]
 8003f52:	9d07      	ldr	r5, [sp, #28]
 8003f54:	47a8      	blx	r5
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	d0aa      	beq.n	8003eb0 <_printf_i+0x13c>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	079b      	lsls	r3, r3, #30
 8003f5e:	d415      	bmi.n	8003f8c <_printf_i+0x218>
 8003f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f62:	68e0      	ldr	r0, [r4, #12]
 8003f64:	4298      	cmp	r0, r3
 8003f66:	daa5      	bge.n	8003eb4 <_printf_i+0x140>
 8003f68:	0018      	movs	r0, r3
 8003f6a:	e7a3      	b.n	8003eb4 <_printf_i+0x140>
 8003f6c:	0022      	movs	r2, r4
 8003f6e:	2301      	movs	r3, #1
 8003f70:	9906      	ldr	r1, [sp, #24]
 8003f72:	9805      	ldr	r0, [sp, #20]
 8003f74:	9e07      	ldr	r6, [sp, #28]
 8003f76:	3219      	adds	r2, #25
 8003f78:	47b0      	blx	r6
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	d098      	beq.n	8003eb0 <_printf_i+0x13c>
 8003f7e:	3501      	adds	r5, #1
 8003f80:	68e3      	ldr	r3, [r4, #12]
 8003f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dcf0      	bgt.n	8003f6c <_printf_i+0x1f8>
 8003f8a:	e7e9      	b.n	8003f60 <_printf_i+0x1ec>
 8003f8c:	2500      	movs	r5, #0
 8003f8e:	e7f7      	b.n	8003f80 <_printf_i+0x20c>
 8003f90:	080056c5 	.word	0x080056c5
 8003f94:	080056d6 	.word	0x080056d6

08003f98 <memchr>:
 8003f98:	b2c9      	uxtb	r1, r1
 8003f9a:	1882      	adds	r2, r0, r2
 8003f9c:	4290      	cmp	r0, r2
 8003f9e:	d101      	bne.n	8003fa4 <memchr+0xc>
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	4770      	bx	lr
 8003fa4:	7803      	ldrb	r3, [r0, #0]
 8003fa6:	428b      	cmp	r3, r1
 8003fa8:	d0fb      	beq.n	8003fa2 <memchr+0xa>
 8003faa:	3001      	adds	r0, #1
 8003fac:	e7f6      	b.n	8003f9c <memchr+0x4>

08003fae <memcpy>:
 8003fae:	2300      	movs	r3, #0
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d100      	bne.n	8003fb8 <memcpy+0xa>
 8003fb6:	bd10      	pop	{r4, pc}
 8003fb8:	5ccc      	ldrb	r4, [r1, r3]
 8003fba:	54c4      	strb	r4, [r0, r3]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	e7f8      	b.n	8003fb2 <memcpy+0x4>

08003fc0 <memmove>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	4288      	cmp	r0, r1
 8003fc4:	d902      	bls.n	8003fcc <memmove+0xc>
 8003fc6:	188b      	adds	r3, r1, r2
 8003fc8:	4298      	cmp	r0, r3
 8003fca:	d303      	bcc.n	8003fd4 <memmove+0x14>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e007      	b.n	8003fe0 <memmove+0x20>
 8003fd0:	5c8b      	ldrb	r3, [r1, r2]
 8003fd2:	5483      	strb	r3, [r0, r2]
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	d2fb      	bcs.n	8003fd0 <memmove+0x10>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	5ccc      	ldrb	r4, [r1, r3]
 8003fdc:	54c4      	strb	r4, [r0, r3]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1fa      	bne.n	8003fda <memmove+0x1a>
 8003fe4:	e7f8      	b.n	8003fd8 <memmove+0x18>
	...

08003fe8 <_free_r>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	0005      	movs	r5, r0
 8003fec:	2900      	cmp	r1, #0
 8003fee:	d010      	beq.n	8004012 <_free_r+0x2a>
 8003ff0:	1f0c      	subs	r4, r1, #4
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	da00      	bge.n	8003ffa <_free_r+0x12>
 8003ff8:	18e4      	adds	r4, r4, r3
 8003ffa:	0028      	movs	r0, r5
 8003ffc:	f000 f918 	bl	8004230 <__malloc_lock>
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <_free_r+0x90>)
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <_free_r+0x2c>
 8004008:	6063      	str	r3, [r4, #4]
 800400a:	6014      	str	r4, [r2, #0]
 800400c:	0028      	movs	r0, r5
 800400e:	f000 f917 	bl	8004240 <__malloc_unlock>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	42a3      	cmp	r3, r4
 8004016:	d908      	bls.n	800402a <_free_r+0x42>
 8004018:	6821      	ldr	r1, [r4, #0]
 800401a:	1860      	adds	r0, r4, r1
 800401c:	4283      	cmp	r3, r0
 800401e:	d1f3      	bne.n	8004008 <_free_r+0x20>
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	1841      	adds	r1, r0, r1
 8004026:	6021      	str	r1, [r4, #0]
 8004028:	e7ee      	b.n	8004008 <_free_r+0x20>
 800402a:	001a      	movs	r2, r3
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <_free_r+0x4e>
 8004032:	42a3      	cmp	r3, r4
 8004034:	d9f9      	bls.n	800402a <_free_r+0x42>
 8004036:	6811      	ldr	r1, [r2, #0]
 8004038:	1850      	adds	r0, r2, r1
 800403a:	42a0      	cmp	r0, r4
 800403c:	d10b      	bne.n	8004056 <_free_r+0x6e>
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1809      	adds	r1, r1, r0
 8004042:	1850      	adds	r0, r2, r1
 8004044:	6011      	str	r1, [r2, #0]
 8004046:	4283      	cmp	r3, r0
 8004048:	d1e0      	bne.n	800400c <_free_r+0x24>
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	1841      	adds	r1, r0, r1
 8004050:	6011      	str	r1, [r2, #0]
 8004052:	6053      	str	r3, [r2, #4]
 8004054:	e7da      	b.n	800400c <_free_r+0x24>
 8004056:	42a0      	cmp	r0, r4
 8004058:	d902      	bls.n	8004060 <_free_r+0x78>
 800405a:	230c      	movs	r3, #12
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	e7d5      	b.n	800400c <_free_r+0x24>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	1860      	adds	r0, r4, r1
 8004064:	4283      	cmp	r3, r0
 8004066:	d103      	bne.n	8004070 <_free_r+0x88>
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	1841      	adds	r1, r0, r1
 800406e:	6021      	str	r1, [r4, #0]
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	6054      	str	r4, [r2, #4]
 8004074:	e7ca      	b.n	800400c <_free_r+0x24>
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20000194 	.word	0x20000194

0800407c <sbrk_aligned>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4e0f      	ldr	r6, [pc, #60]	; (80040bc <sbrk_aligned+0x40>)
 8004080:	000d      	movs	r5, r1
 8004082:	6831      	ldr	r1, [r6, #0]
 8004084:	0004      	movs	r4, r0
 8004086:	2900      	cmp	r1, #0
 8004088:	d102      	bne.n	8004090 <sbrk_aligned+0x14>
 800408a:	f000 f8bf 	bl	800420c <_sbrk_r>
 800408e:	6030      	str	r0, [r6, #0]
 8004090:	0029      	movs	r1, r5
 8004092:	0020      	movs	r0, r4
 8004094:	f000 f8ba 	bl	800420c <_sbrk_r>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d00a      	beq.n	80040b2 <sbrk_aligned+0x36>
 800409c:	2303      	movs	r3, #3
 800409e:	1cc5      	adds	r5, r0, #3
 80040a0:	439d      	bics	r5, r3
 80040a2:	42a8      	cmp	r0, r5
 80040a4:	d007      	beq.n	80040b6 <sbrk_aligned+0x3a>
 80040a6:	1a29      	subs	r1, r5, r0
 80040a8:	0020      	movs	r0, r4
 80040aa:	f000 f8af 	bl	800420c <_sbrk_r>
 80040ae:	1c43      	adds	r3, r0, #1
 80040b0:	d101      	bne.n	80040b6 <sbrk_aligned+0x3a>
 80040b2:	2501      	movs	r5, #1
 80040b4:	426d      	negs	r5, r5
 80040b6:	0028      	movs	r0, r5
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	20000198 	.word	0x20000198

080040c0 <_malloc_r>:
 80040c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c2:	2203      	movs	r2, #3
 80040c4:	1ccb      	adds	r3, r1, #3
 80040c6:	4393      	bics	r3, r2
 80040c8:	3308      	adds	r3, #8
 80040ca:	0006      	movs	r6, r0
 80040cc:	001f      	movs	r7, r3
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d232      	bcs.n	8004138 <_malloc_r+0x78>
 80040d2:	270c      	movs	r7, #12
 80040d4:	42b9      	cmp	r1, r7
 80040d6:	d831      	bhi.n	800413c <_malloc_r+0x7c>
 80040d8:	0030      	movs	r0, r6
 80040da:	f000 f8a9 	bl	8004230 <__malloc_lock>
 80040de:	4d32      	ldr	r5, [pc, #200]	; (80041a8 <_malloc_r+0xe8>)
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	001c      	movs	r4, r3
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	d12e      	bne.n	8004146 <_malloc_r+0x86>
 80040e8:	0039      	movs	r1, r7
 80040ea:	0030      	movs	r0, r6
 80040ec:	f7ff ffc6 	bl	800407c <sbrk_aligned>
 80040f0:	0004      	movs	r4, r0
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d11e      	bne.n	8004134 <_malloc_r+0x74>
 80040f6:	682c      	ldr	r4, [r5, #0]
 80040f8:	0025      	movs	r5, r4
 80040fa:	2d00      	cmp	r5, #0
 80040fc:	d14a      	bne.n	8004194 <_malloc_r+0xd4>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	0029      	movs	r1, r5
 8004102:	18e3      	adds	r3, r4, r3
 8004104:	0030      	movs	r0, r6
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	f000 f880 	bl	800420c <_sbrk_r>
 800410c:	9b01      	ldr	r3, [sp, #4]
 800410e:	4283      	cmp	r3, r0
 8004110:	d143      	bne.n	800419a <_malloc_r+0xda>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	3703      	adds	r7, #3
 8004116:	1aff      	subs	r7, r7, r3
 8004118:	2303      	movs	r3, #3
 800411a:	439f      	bics	r7, r3
 800411c:	3708      	adds	r7, #8
 800411e:	2f0c      	cmp	r7, #12
 8004120:	d200      	bcs.n	8004124 <_malloc_r+0x64>
 8004122:	270c      	movs	r7, #12
 8004124:	0039      	movs	r1, r7
 8004126:	0030      	movs	r0, r6
 8004128:	f7ff ffa8 	bl	800407c <sbrk_aligned>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d034      	beq.n	800419a <_malloc_r+0xda>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	19df      	adds	r7, r3, r7
 8004134:	6027      	str	r7, [r4, #0]
 8004136:	e013      	b.n	8004160 <_malloc_r+0xa0>
 8004138:	2b00      	cmp	r3, #0
 800413a:	dacb      	bge.n	80040d4 <_malloc_r+0x14>
 800413c:	230c      	movs	r3, #12
 800413e:	2500      	movs	r5, #0
 8004140:	6033      	str	r3, [r6, #0]
 8004142:	0028      	movs	r0, r5
 8004144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004146:	6822      	ldr	r2, [r4, #0]
 8004148:	1bd1      	subs	r1, r2, r7
 800414a:	d420      	bmi.n	800418e <_malloc_r+0xce>
 800414c:	290b      	cmp	r1, #11
 800414e:	d917      	bls.n	8004180 <_malloc_r+0xc0>
 8004150:	19e2      	adds	r2, r4, r7
 8004152:	6027      	str	r7, [r4, #0]
 8004154:	42a3      	cmp	r3, r4
 8004156:	d111      	bne.n	800417c <_malloc_r+0xbc>
 8004158:	602a      	str	r2, [r5, #0]
 800415a:	6863      	ldr	r3, [r4, #4]
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	6053      	str	r3, [r2, #4]
 8004160:	0030      	movs	r0, r6
 8004162:	0025      	movs	r5, r4
 8004164:	f000 f86c 	bl	8004240 <__malloc_unlock>
 8004168:	2207      	movs	r2, #7
 800416a:	350b      	adds	r5, #11
 800416c:	1d23      	adds	r3, r4, #4
 800416e:	4395      	bics	r5, r2
 8004170:	1aea      	subs	r2, r5, r3
 8004172:	429d      	cmp	r5, r3
 8004174:	d0e5      	beq.n	8004142 <_malloc_r+0x82>
 8004176:	1b5b      	subs	r3, r3, r5
 8004178:	50a3      	str	r3, [r4, r2]
 800417a:	e7e2      	b.n	8004142 <_malloc_r+0x82>
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	e7ec      	b.n	800415a <_malloc_r+0x9a>
 8004180:	6862      	ldr	r2, [r4, #4]
 8004182:	42a3      	cmp	r3, r4
 8004184:	d101      	bne.n	800418a <_malloc_r+0xca>
 8004186:	602a      	str	r2, [r5, #0]
 8004188:	e7ea      	b.n	8004160 <_malloc_r+0xa0>
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	e7e8      	b.n	8004160 <_malloc_r+0xa0>
 800418e:	0023      	movs	r3, r4
 8004190:	6864      	ldr	r4, [r4, #4]
 8004192:	e7a7      	b.n	80040e4 <_malloc_r+0x24>
 8004194:	002c      	movs	r4, r5
 8004196:	686d      	ldr	r5, [r5, #4]
 8004198:	e7af      	b.n	80040fa <_malloc_r+0x3a>
 800419a:	230c      	movs	r3, #12
 800419c:	0030      	movs	r0, r6
 800419e:	6033      	str	r3, [r6, #0]
 80041a0:	f000 f84e 	bl	8004240 <__malloc_unlock>
 80041a4:	e7cd      	b.n	8004142 <_malloc_r+0x82>
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	20000194 	.word	0x20000194

080041ac <_realloc_r>:
 80041ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ae:	0007      	movs	r7, r0
 80041b0:	000e      	movs	r6, r1
 80041b2:	0014      	movs	r4, r2
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d105      	bne.n	80041c4 <_realloc_r+0x18>
 80041b8:	0011      	movs	r1, r2
 80041ba:	f7ff ff81 	bl	80040c0 <_malloc_r>
 80041be:	0005      	movs	r5, r0
 80041c0:	0028      	movs	r0, r5
 80041c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	d103      	bne.n	80041d0 <_realloc_r+0x24>
 80041c8:	f7ff ff0e 	bl	8003fe8 <_free_r>
 80041cc:	0025      	movs	r5, r4
 80041ce:	e7f7      	b.n	80041c0 <_realloc_r+0x14>
 80041d0:	f000 f83e 	bl	8004250 <_malloc_usable_size_r>
 80041d4:	9001      	str	r0, [sp, #4]
 80041d6:	4284      	cmp	r4, r0
 80041d8:	d803      	bhi.n	80041e2 <_realloc_r+0x36>
 80041da:	0035      	movs	r5, r6
 80041dc:	0843      	lsrs	r3, r0, #1
 80041de:	42a3      	cmp	r3, r4
 80041e0:	d3ee      	bcc.n	80041c0 <_realloc_r+0x14>
 80041e2:	0021      	movs	r1, r4
 80041e4:	0038      	movs	r0, r7
 80041e6:	f7ff ff6b 	bl	80040c0 <_malloc_r>
 80041ea:	1e05      	subs	r5, r0, #0
 80041ec:	d0e8      	beq.n	80041c0 <_realloc_r+0x14>
 80041ee:	9b01      	ldr	r3, [sp, #4]
 80041f0:	0022      	movs	r2, r4
 80041f2:	429c      	cmp	r4, r3
 80041f4:	d900      	bls.n	80041f8 <_realloc_r+0x4c>
 80041f6:	001a      	movs	r2, r3
 80041f8:	0031      	movs	r1, r6
 80041fa:	0028      	movs	r0, r5
 80041fc:	f7ff fed7 	bl	8003fae <memcpy>
 8004200:	0031      	movs	r1, r6
 8004202:	0038      	movs	r0, r7
 8004204:	f7ff fef0 	bl	8003fe8 <_free_r>
 8004208:	e7da      	b.n	80041c0 <_realloc_r+0x14>
	...

0800420c <_sbrk_r>:
 800420c:	2300      	movs	r3, #0
 800420e:	b570      	push	{r4, r5, r6, lr}
 8004210:	4d06      	ldr	r5, [pc, #24]	; (800422c <_sbrk_r+0x20>)
 8004212:	0004      	movs	r4, r0
 8004214:	0008      	movs	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fd f822 	bl	8001260 <_sbrk>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d103      	bne.n	8004228 <_sbrk_r+0x1c>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d000      	beq.n	8004228 <_sbrk_r+0x1c>
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	bd70      	pop	{r4, r5, r6, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	2000019c 	.word	0x2000019c

08004230 <__malloc_lock>:
 8004230:	b510      	push	{r4, lr}
 8004232:	4802      	ldr	r0, [pc, #8]	; (800423c <__malloc_lock+0xc>)
 8004234:	f000 f814 	bl	8004260 <__retarget_lock_acquire_recursive>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	200001a0 	.word	0x200001a0

08004240 <__malloc_unlock>:
 8004240:	b510      	push	{r4, lr}
 8004242:	4802      	ldr	r0, [pc, #8]	; (800424c <__malloc_unlock+0xc>)
 8004244:	f000 f80d 	bl	8004262 <__retarget_lock_release_recursive>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	200001a0 	.word	0x200001a0

08004250 <_malloc_usable_size_r>:
 8004250:	1f0b      	subs	r3, r1, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1f18      	subs	r0, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	da01      	bge.n	800425e <_malloc_usable_size_r+0xe>
 800425a:	580b      	ldr	r3, [r1, r0]
 800425c:	18c0      	adds	r0, r0, r3
 800425e:	4770      	bx	lr

08004260 <__retarget_lock_acquire_recursive>:
 8004260:	4770      	bx	lr

08004262 <__retarget_lock_release_recursive>:
 8004262:	4770      	bx	lr

08004264 <_init>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426a:	bc08      	pop	{r3}
 800426c:	469e      	mov	lr, r3
 800426e:	4770      	bx	lr

08004270 <_fini>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr
